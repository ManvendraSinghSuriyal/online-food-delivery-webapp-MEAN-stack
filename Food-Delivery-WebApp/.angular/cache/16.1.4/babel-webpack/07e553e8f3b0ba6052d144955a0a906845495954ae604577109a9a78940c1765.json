{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { User } from '../shared/models/User';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nexport class UserService {\n  // @Output() fireIsLoggedIn: EventEmitter<any> = new EventEmitter<any>\n  constructor(http, toastr) {\n    this.http = http;\n    this.toastr = toastr;\n    this.loginUrl = \"http://localhost:5000/api/users/login\";\n    this.signupUrl = \"http://localhost:5000/api/users/signup\";\n    this.userSubject = new BehaviorSubject(this.getUserFromLocalStorage());\n    this.userObservable = this.userSubject.asObservable();\n  }\n  loginUser(userLogin) {\n    return this.http.post(this.loginUrl, userLogin).pipe(tap({\n      next: user => {\n        this.toastr.success(\"You are logged In successfully!!\");\n        this.setUsertoLocalStorage(user);\n        //the reason why login username was not reflecting without refresh was i was not using userSubject.next(user) \n        // so only initializing it with localstorage value wouldn't trigger any change detection or notify subscribers.\n        // so the below code is must to notify change to automatically detect it \n        this.userSubject.next(user);\n        // using event emitter to modify navbar with login user name automatically without refreshing page\n        // this.fireIsLoggedIn.next(user)\n      },\n\n      error: errorResponse => {\n        this.toastr.error(\"Invalid email or password,try again\");\n      }\n    }));\n  }\n  setUsertoLocalStorage(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  getUserFromLocalStorage() {\n    const userJson = localStorage.getItem('user');\n    if (userJson) return JSON.parse(userJson);\n    return new User();\n  }\n  getCurrentUser() {\n    this.userSubject.value;\n  }\n  logout() {\n    this.userSubject.next(new User());\n    localStorage.removeItem('user');\n    window.location.reload();\n  }\n  // getEmitter() { \n  //   return this.fireIsLoggedIn; \n  // } \n  isLoggedIn() {\n    let tokenStr = localStorage.getItem('user');\n    if (tokenStr == undefined || tokenStr == '' || tokenStr == null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  signupUser(user) {\n    return this.http.post(this.signupUrl, user).pipe(tap({\n      next: user => {\n        this.setUsertoLocalStorage(user);\n        this.userSubject.next(user);\n        console.log(user);\n        this.toastr.success(`welcome ${user.name}`, 'your are Registerd Successfully');\n      },\n      error: errorResponse => {\n        this.toastr.error(errorResponse.error, 'Registeration Failed');\n      }\n    }));\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","tap","User","UserService","constructor","http","toastr","loginUrl","signupUrl","userSubject","getUserFromLocalStorage","userObservable","asObservable","loginUser","userLogin","post","pipe","next","user","success","setUsertoLocalStorage","error","errorResponse","localStorage","setItem","JSON","stringify","userJson","getItem","parse","getCurrentUser","value","logout","removeItem","window","location","reload","isLoggedIn","tokenStr","undefined","signupUser","console","log","name","i0","ɵɵinject","i1","HttpClient","i2","ToastrService","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\Angular Projects\\OnlineFoodDelivery_WebApplication\\Food-Delivery-WebApp\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject, tap } from 'rxjs';\nimport { User } from '../shared/models/User';\nimport { UserLogin } from '../shared/interfaces/UserLogin';\nimport { IUserRegister } from '../shared/interfaces/UserRegister';\nimport { ToastrService } from 'ngx-toastr';\n\n@Injectable({\n  providedIn: 'root'\n  \n})\nexport class UserService {\n\nloginUrl=\"http://localhost:5000/api/users/login\"\nsignupUrl=\"http://localhost:5000/api/users/signup\"\n\nprivate userSubject=new BehaviorSubject<User>(this.getUserFromLocalStorage());\n// public loginStatusSubject=new Subject<boolean>();\n\npublic userObservable:Observable<User>\n\n// @Output() fireIsLoggedIn: EventEmitter<any> = new EventEmitter<any>\n\n  constructor(private http:HttpClient, private toastr:ToastrService) {\n\n    this.userObservable=this.userSubject.asObservable()\n   }\n\n\n\n  loginUser(userLogin:UserLogin){\n\n   return this.http.post<User>(this.loginUrl,userLogin).pipe(tap({\n    next:(user)=>{\n      this.toastr.success(\"You are logged In successfully!!\");\n      this.setUsertoLocalStorage(user) \n\n      //the reason why login username was not reflecting without refresh was i was not using userSubject.next(user) \n      // so only initializing it with localstorage value wouldn't trigger any change detection or notify subscribers.\n      // so the below code is must to notify change to automatically detect it \n      this.userSubject.next(user)\n\n      // using event emitter to modify navbar with login user name automatically without refreshing page\n      // this.fireIsLoggedIn.next(user)\n      \n    },\n    error:(errorResponse)=>{\n      this.toastr.error(\"Invalid email or password,try again\")\n    \n    }\n   \n  \n    \n   }))\n\n\n  }\n\n  setUsertoLocalStorage(user:User){\n\n\n\n    localStorage.setItem('user',JSON.stringify(user))\n  }\n\n  getUserFromLocalStorage(){\n\n    const userJson= localStorage.getItem('user')\n    if(userJson)\n    return JSON.parse(userJson) as User\n\n    return new User();\n  }\n\n  getCurrentUser(){\n    this.userSubject.value;\n\n  }\n\n  logout(){\n    this.userSubject.next(new User());\n    localStorage.removeItem('user')\n    window.location.reload();\n\n\n  }\n\n  // getEmitter() { \n  //   return this.fireIsLoggedIn; \n  // } \n\n  isLoggedIn(){\n    let tokenStr=localStorage.getItem('user');\n\n    if(tokenStr==undefined || tokenStr==''|| tokenStr==null){\n      return false\n    }\n    else{\n      return true;\n    }\n\n  }\n\nsignupUser(user:IUserRegister){\n\n  return this.http.post<User>(this.signupUrl,user).pipe(tap({\n\n    next:(user)=> {\n\n      this.setUsertoLocalStorage(user);\n      this.userSubject.next(user) \n      \n      console.log(user)\n      this.toastr.success(\n        `welcome ${user.name}`,\n        'your are Registerd Successfully'\n      )\n             \n    },\n    error: (errorResponse) => {\n      this.toastr.error(errorResponse.error,\n        'Registeration Failed')\n    }\n\n  }))\n}\n\n\n\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}