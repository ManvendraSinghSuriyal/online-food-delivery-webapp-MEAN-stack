{"ast":null,"code":"import { sample_foods } from 'src/data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FoodService {\n  constructor(http) {\n    this.http = http;\n    this.foodUrl = 'http://localhost:5000/api/food';\n  }\n  getAll() {\n    return sample_foods;\n  }\n  getAllFoodBySearchTerm(searchTerm) {\n    return this.http.get(`${this.foodUrl}/search/` + searchTerm);\n    // return this.getAll().filter(food=>food.name.toLowerCase().includes(searchTerm.toLowerCase()))\n  }\n\n  getAllTags() {\n    return this.http.get(`${this.foodUrl}/tags`);\n  }\n  getFoodByTag(tag) {\n    return this.http.get(`${this.foodUrl}/tag/` + tag);\n    // return tag==='All'? this.getAll(): this.getAll().filter((food)=> food.tags?.includes(tag))\n  }\n\n  getFoodById(foodId) {\n    return this.http.get(`${this.foodUrl}/` + foodId);\n  }\n}\nFoodService.ɵfac = function FoodService_Factory(t) {\n  return new (t || FoodService)(i0.ɵɵinject(i1.HttpClient));\n};\nFoodService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FoodService,\n  factory: FoodService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["sample_foods","FoodService","constructor","http","foodUrl","getAll","getAllFoodBySearchTerm","searchTerm","get","getAllTags","getFoodByTag","tag","getFoodById","foodId","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\Angular Projects\\OnlineFoodDelivery_WebApplication\\Food-Delivery-WebApp\\src\\app\\services\\food.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { sample_foods, sample_tags } from 'src/data';\nimport { Food } from '../shared/models/Food';\nimport { Tag } from '../shared/models/Tag';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FoodService {\n\n  foodUrl='http://localhost:5000/api/food'\n  constructor(private http:HttpClient) { }\n\n  getAll():Food[]{\n    return sample_foods;\n\n  }\n\n\n  getAllFoodBySearchTerm(searchTerm:String):Observable<Food[]>{\n\n    return this.http.get<Food[]>(`${this.foodUrl}/search/`+searchTerm)\n    // return this.getAll().filter(food=>food.name.toLowerCase().includes(searchTerm.toLowerCase()))\n\n  }\n\n  getAllTags():Observable<Tag[]>{\n    return this.http.get<Tag[]>(`${this.foodUrl}/tags`)\n    \n  }\n\n  getFoodByTag(tag:string):Observable<Food[]>{\n    return this.http.get<Food[]>(`${this.foodUrl}/tag/`+tag)\n    \n    \n    // return tag==='All'? this.getAll(): this.getAll().filter((food)=> food.tags?.includes(tag))\n\n\n  }\n\n  getFoodById(foodId:string):Observable<Food>{\n\n    return this.http.get<Food>(`${this.foodUrl}/`+foodId)\n \n\n  }\n}\n"],"mappings":"AACA,SAASA,YAAY,QAAqB,UAAU;;;AASpD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IADxB,KAAAC,OAAO,GAAC,gCAAgC;EACD;EAEvCC,MAAMA,CAAA;IACJ,OAAOL,YAAY;EAErB;EAGAM,sBAAsBA,CAACC,UAAiB;IAEtC,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAS,GAAG,IAAI,CAACJ,OAAO,UAAU,GAACG,UAAU,CAAC;IAClE;EAEF;;EAEAE,UAAUA,CAAA;IACR,OAAO,IAAI,CAACN,IAAI,CAACK,GAAG,CAAQ,GAAG,IAAI,CAACJ,OAAO,OAAO,CAAC;EAErD;EAEAM,YAAYA,CAACC,GAAU;IACrB,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAAS,GAAG,IAAI,CAACJ,OAAO,OAAO,GAACO,GAAG,CAAC;IAGxD;EAGF;;EAEAC,WAAWA,CAACC,MAAa;IAEvB,OAAO,IAAI,CAACV,IAAI,CAACK,GAAG,CAAO,GAAG,IAAI,CAACJ,OAAO,GAAG,GAACS,MAAM,CAAC;EAGvD;;AArCWZ,WAAW,C;mBAAXA,WAAW,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXhB,WAAW,C;SAAXA,WAAW;EAAAiB,OAAA,EAAXjB,WAAW,CAAAkB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}