{"ast":null,"code":"export const PasswordsMatchValidator = (passwordControlName, confirmPasswordControlName) => control => {\n  const validator = form => {\n    const passwordControl = form.get(passwordControlName);\n    const confirmPasswordControl = form.get(confirmPasswordControlName);\n    if (!passwordControl || !confirmPasswordControl) return;\n    if (passwordControl.value !== confirmPasswordControl.value) {\n      confirmPasswordControl.setErrors({\n        notMatch: true\n      });\n    } else {\n      const errors = confirmPasswordControl.errors;\n      if (!errors) return;\n      delete errors[\"notMatch\"];\n      confirmPasswordControl.setErrors(errors);\n    }\n  };\n  return validator;\n};\nexport const passwordMatchValidator = control => {\n  const password = control.get('password');\n  const confirmPassword = control.get('confirmPassword');\n  if (password && confirmPassword && password.value !== confirmPassword.value) {\n    confirmPassword.setErrors({\n      passwordMismatch: true\n    });\n  } else {\n    confirmPassword?.setErrors(null);\n  }\n  return null;\n};","map":{"version":3,"names":["PasswordsMatchValidator","passwordControlName","confirmPasswordControlName","control","validator","form","passwordControl","get","confirmPasswordControl","value","setErrors","notMatch","errors","passwordMatchValidator","password","confirmPassword","passwordMismatch"],"sources":["D:\\Projects\\Angular Projects\\OnlineFoodDelivery_WebApplication\\Food-Delivery-WebApp\\src\\app\\shared\\validators\\Validators.ts"],"sourcesContent":["import { AbstractControl } from \"@angular/forms\";\r\n\r\nexport const PasswordsMatchValidator=(passwordControlName: string,\r\n    confirmPasswordControlName: string)=>(control:AbstractControl)=>{\r\n        const validator = (form: AbstractControl) => {\r\n            \r\n          const passwordControl =  form.get(passwordControlName);\r\n          const confirmPasswordControl =  form.get(confirmPasswordControlName);\r\n  \r\n          if(!passwordControl || !confirmPasswordControl) return;\r\n  \r\n          if(passwordControl.value !== confirmPasswordControl.value){\r\n            confirmPasswordControl.setErrors({notMatch: true});\r\n          }else{\r\n            const errors = confirmPasswordControl.errors;\r\n            if(!errors) return;\r\n  \r\n            delete errors[\"notMatch\"];\r\n            confirmPasswordControl.setErrors(errors);\r\n          }\r\n        }\r\n        return validator;\r\n      }\r\n\r\n\r\n\r\n\r\n    export const passwordMatchValidator= (control: AbstractControl)=>{\r\n        const password = control.get('password');\r\n        const confirmPassword = control.get('confirmPassword');\r\n    \r\n        if (password && confirmPassword && password.value !== confirmPassword.value) {\r\n          confirmPassword.setErrors({ passwordMismatch: true });\r\n        } else {\r\n          confirmPassword?.setErrors(null);\r\n        }\r\n    \r\n        return null;\r\n      }"],"mappings":"AAEA,OAAO,MAAMA,uBAAuB,GAACA,CAACC,mBAA2B,EAC7DC,0BAAkC,KAAIC,OAAuB,IAAG;EAC5D,MAAMC,SAAS,GAAIC,IAAqB,IAAI;IAE1C,MAAMC,eAAe,GAAID,IAAI,CAACE,GAAG,CAACN,mBAAmB,CAAC;IACtD,MAAMO,sBAAsB,GAAIH,IAAI,CAACE,GAAG,CAACL,0BAA0B,CAAC;IAEpE,IAAG,CAACI,eAAe,IAAI,CAACE,sBAAsB,EAAE;IAEhD,IAAGF,eAAe,CAACG,KAAK,KAAKD,sBAAsB,CAACC,KAAK,EAAC;MACxDD,sBAAsB,CAACE,SAAS,CAAC;QAACC,QAAQ,EAAE;MAAI,CAAC,CAAC;KACnD,MAAI;MACH,MAAMC,MAAM,GAAGJ,sBAAsB,CAACI,MAAM;MAC5C,IAAG,CAACA,MAAM,EAAE;MAEZ,OAAOA,MAAM,CAAC,UAAU,CAAC;MACzBJ,sBAAsB,CAACE,SAAS,CAACE,MAAM,CAAC;;EAE5C,CAAC;EACD,OAAOR,SAAS;AAClB,CAAC;AAKH,OAAO,MAAMS,sBAAsB,GAAGV,OAAwB,IAAG;EAC7D,MAAMW,QAAQ,GAAGX,OAAO,CAACI,GAAG,CAAC,UAAU,CAAC;EACxC,MAAMQ,eAAe,GAAGZ,OAAO,CAACI,GAAG,CAAC,iBAAiB,CAAC;EAEtD,IAAIO,QAAQ,IAAIC,eAAe,IAAID,QAAQ,CAACL,KAAK,KAAKM,eAAe,CAACN,KAAK,EAAE;IAC3EM,eAAe,CAACL,SAAS,CAAC;MAAEM,gBAAgB,EAAE;IAAI,CAAE,CAAC;GACtD,MAAM;IACLD,eAAe,EAAEL,SAAS,CAAC,IAAI,CAAC;;EAGlC,OAAO,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}