{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let NavbarComponent = class NavbarComponent {\n  constructor(cartService, userService, cdr, ngZone) {\n    this.cartService = cartService;\n    this.userService = userService;\n    this.cdr = cdr;\n    this.ngZone = ngZone;\n    this.isLoggedIn = false;\n    this.totalQuantity = 0;\n  }\n  ngOnInit() {\n    //the reason why login username was not reflecting without refresh was i was not using userSubject.next(user) \n    // so only initializing it with localstorage value wouldn't trigger any change detection or notify subscribers.\n    // so userSubject.next(user) is required in userService inside the loginuser method so that it would put a new value inside behvaiour subject so that it can notify changes and automatically modify dom without refresh\n    this.userService.userObservable.subscribe(newUser => {\n      this.isLoggedIn = this.userService.isLoggedIn();\n      this.user = newUser;\n    });\n    this.cartService.getCartObservable().subscribe(cart => this.totalQuantity = cart.totalCount);\n    // subscribing getEmitter for getting user value in the event emitter and using this it will ntoify component that changes occur so refrlect it\n    // above userObservable approach was not automatically changing without refresh  \n    // this.userService.getEmitter().subscribe((user)=>{\n    //     this.user=user\n    //     this.isLoggedIn=!!user?.token\n    //     console.log(this.user)\n    //     console.log(\"Component is notified of successfull login!\");\n    //   })\n  }\n\n  logout() {\n    this.userService.logout();\n  }\n  get isAuth() {\n    return !!this.user?.token;\n  }\n};\nNavbarComponent = __decorate([Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n  // changeDetection: ChangeDetectionStrategy.OnPush\n})], NavbarComponent);","map":{"version":3,"names":["Component","NavbarComponent","constructor","cartService","userService","cdr","ngZone","isLoggedIn","totalQuantity","ngOnInit","userObservable","subscribe","newUser","user","getCartObservable","cart","totalCount","logout","isAuth","token","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Projects\\Angular Projects\\OnlineFoodDelivery_WebApplication\\Food-Delivery-WebApp\\src\\app\\components\\navbar\\navbar.component.ts"],"sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, NgZone, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { CartService } from 'src/app/services/cart.service';\nimport { UserService } from 'src/app/services/user.service';\nimport { User } from 'src/app/shared/models/User';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css'],\n  // changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NavbarComponent  implements OnInit {\n\n  isLoggedIn: boolean = false;\n  totalQuantity:number=0\n\n  user!:User\n  constructor(private cartService:CartService,\n     public userService:UserService, \n     private cdr: ChangeDetectorRef,\n     private ngZone:NgZone){}\n \n  ngOnInit(): void {\n\n    //the reason why login username was not reflecting without refresh was i was not using userSubject.next(user) \n      // so only initializing it with localstorage value wouldn't trigger any change detection or notify subscribers.\n      // so userSubject.next(user) is required in userService inside the loginuser method so that it would put a new value inside behvaiour subject so that it can notify changes and automatically modify dom without refresh\n    this.userService.userObservable.subscribe((newUser)=>{\n      \n      this.isLoggedIn=this.userService.isLoggedIn()\n      this.user=newUser\n    })\n\n\n    \n\n  \n  \n  \n    this.cartService.getCartObservable().subscribe((cart)=>\n    this.totalQuantity=cart.totalCount)\n\n\n   \n\n \n\n\n    // subscribing getEmitter for getting user value in the event emitter and using this it will ntoify component that changes occur so refrlect it\n    // above userObservable approach was not automatically changing without refresh  \n    // this.userService.getEmitter().subscribe((user)=>{\n    //     this.user=user\n    //     this.isLoggedIn=!!user?.token\n    //     console.log(this.user)\n\n    //     console.log(\"Component is notified of successfull login!\");\n    //   })\n    \n \n  }\n\n\n  logout(){\n    this.userService.logout()\n\n  }\n\n  get isAuth(){\n    return !!this.user?.token\n  }\n\n}\n"],"mappings":";AAAA,SAAqDA,SAAS,QAAkD,eAAe;AAWxH,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAM1BC,YAAoBC,WAAuB,EACjCC,WAAuB,EACtBC,GAAsB,EACtBC,MAAa;IAHJ,KAAAH,WAAW,GAAXA,WAAW;IACrB,KAAAC,WAAW,GAAXA,WAAW;IACV,KAAAC,GAAG,GAAHA,GAAG;IACH,KAAAC,MAAM,GAANA,MAAM;IAPjB,KAAAC,UAAU,GAAY,KAAK;IAC3B,KAAAC,aAAa,GAAQ,CAAC;EAMI;EAE1BC,QAAQA,CAAA;IAEN;IACE;IACA;IACF,IAAI,CAACL,WAAW,CAACM,cAAc,CAACC,SAAS,CAAEC,OAAO,IAAG;MAEnD,IAAI,CAACL,UAAU,GAAC,IAAI,CAACH,WAAW,CAACG,UAAU,EAAE;MAC7C,IAAI,CAACM,IAAI,GAACD,OAAO;IACnB,CAAC,CAAC;IAQF,IAAI,CAACT,WAAW,CAACW,iBAAiB,EAAE,CAACH,SAAS,CAAEI,IAAI,IACpD,IAAI,CAACP,aAAa,GAACO,IAAI,CAACC,UAAU,CAAC;IAQnC;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;EAGF;;EAGAC,MAAMA,CAAA;IACJ,IAAI,CAACb,WAAW,CAACa,MAAM,EAAE;EAE3B;EAEA,IAAIC,MAAMA,CAAA;IACR,OAAO,CAAC,CAAC,IAAI,CAACL,IAAI,EAAEM,KAAK;EAC3B;CAED;AA5DYlB,eAAe,GAAAmB,UAAA,EAN3BpB,SAAS,CAAC;EACTqB,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;EACpC;CACD,CAAC,C,EACWtB,eAAe,CA4D3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}