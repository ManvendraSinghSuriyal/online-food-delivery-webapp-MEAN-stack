{"ast":null,"code":"import { sample_foods, sample_tags } from 'src/data';\nimport { Food } from '../shared/models/Food';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FoodService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:5000/api';\n  }\n  getAll() {\n    return sample_foods;\n  }\n  getAllFoodBySearchTerm(searchTerm) {\n    return this.http.get(`${this.baseUrl}/food/search/` + searchTerm);\n    // return this.getAll().filter(food=>food.name.toLowerCase().includes(searchTerm.toLowerCase()))\n  }\n\n  getAllTags() {\n    return sample_tags;\n  }\n  getFoodByTag(tag) {\n    return tag === 'All' ? this.getAll() : this.getAll().filter(food => food.tags?.includes(tag));\n  }\n  getFoodById(foodId) {\n    return this.getAll().find(food => food.id == foodId) ?? new Food();\n  }\n}\nFoodService.ɵfac = function FoodService_Factory(t) {\n  return new (t || FoodService)(i0.ɵɵinject(i1.HttpClient));\n};\nFoodService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FoodService,\n  factory: FoodService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["sample_foods","sample_tags","Food","FoodService","constructor","http","baseUrl","getAll","getAllFoodBySearchTerm","searchTerm","get","getAllTags","getFoodByTag","tag","filter","food","tags","includes","getFoodById","foodId","find","id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\Angular Projects\\OnlineFoodDelivery_WebApplication\\Food-Delivery-WebApp\\src\\app\\services\\food.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { sample_foods, sample_tags } from 'src/data';\nimport { Food } from '../shared/models/Food';\nimport { Tag } from '../shared/models/Tag';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FoodService {\n\n  baseUrl='http://localhost:5000/api'\n  constructor(private http:HttpClient) { }\n\n  getAll():Food[]{\n    return sample_foods;\n\n  }\n\n\n  getAllFoodBySearchTerm(searchTerm:String):Observable<Food[]>{\n\n    return this.http.get<Food[]>(`${this.baseUrl}/food/search/`+searchTerm)\n    // return this.getAll().filter(food=>food.name.toLowerCase().includes(searchTerm.toLowerCase()))\n\n  }\n\n  getAllTags():Tag[]{\n    return sample_tags;\n    \n  }\n\n  getFoodByTag(tag:string):Food[]{\n    \n    return tag==='All'? this.getAll(): this.getAll().filter((food)=> food.tags?.includes(tag))\n\n\n  }\n\n  getFoodById(foodId:string){\n    return this.getAll().find(food=>food.id==foodId)??new Food();\n\n\n\n  }\n}\n"],"mappings":"AACA,SAASA,YAAY,EAAEC,WAAW,QAAQ,UAAU;AACpD,SAASC,IAAI,QAAQ,uBAAuB;;;AAQ5C,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IADxB,KAAAC,OAAO,GAAC,2BAA2B;EACI;EAEvCC,MAAMA,CAAA;IACJ,OAAOP,YAAY;EAErB;EAGAQ,sBAAsBA,CAACC,UAAiB;IAEtC,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAS,GAAG,IAAI,CAACJ,OAAO,eAAe,GAACG,UAAU,CAAC;IACvE;EAEF;;EAEAE,UAAUA,CAAA;IACR,OAAOV,WAAW;EAEpB;EAEAW,YAAYA,CAACC,GAAU;IAErB,OAAOA,GAAG,KAAG,KAAK,GAAE,IAAI,CAACN,MAAM,EAAE,GAAE,IAAI,CAACA,MAAM,EAAE,CAACO,MAAM,CAAEC,IAAI,IAAIA,IAAI,CAACC,IAAI,EAAEC,QAAQ,CAACJ,GAAG,CAAC,CAAC;EAG5F;EAEAK,WAAWA,CAACC,MAAa;IACvB,OAAO,IAAI,CAACZ,MAAM,EAAE,CAACa,IAAI,CAACL,IAAI,IAAEA,IAAI,CAACM,EAAE,IAAEF,MAAM,CAAC,IAAE,IAAIjB,IAAI,EAAE;EAI9D;;AAnCWC,WAAW,C;mBAAXA,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXtB,WAAW,C;SAAXA,WAAW;EAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}