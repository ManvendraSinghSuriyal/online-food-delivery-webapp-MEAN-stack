{"ast":null,"code":"import { HttpEventType } from '@angular/common/http';\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/loading.service\";\nexport class LoadingInterceptor {\n  constructor(loadingService) {\n    this.loadingService = loadingService;\n    this.pendingRequest = 0;\n  }\n  intercept(request, next) {\n    this.loadingService.showLoading();\n    this.pendingRequest = this.pendingRequest + 1;\n    return next.handle(request).pipe(tap({\n      next: event => {\n        if (event.type === HttpEventType.Response) {\n          this.handleHideLoading();\n        }\n      },\n      error: _ => {\n        this.handleHideLoading();\n      }\n    }));\n  }\n  handleHideLoading() {\n    this.pendingRequest = this.pendingRequest - 1;\n    if (this.pendingRequest === 0) this.loadingService.hideLoading();\n  }\n}\nLoadingInterceptor.ɵfac = function LoadingInterceptor_Factory(t) {\n  return new (t || LoadingInterceptor)(i0.ɵɵinject(i1.LoadingService));\n};\nLoadingInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoadingInterceptor,\n  factory: LoadingInterceptor.ɵfac\n});","map":{"version":3,"names":["HttpEventType","tap","LoadingInterceptor","constructor","loadingService","pendingRequest","intercept","request","next","showLoading","handle","pipe","event","type","Response","handleHideLoading","error","_","hideLoading","i0","ɵɵinject","i1","LoadingService","factory","ɵfac"],"sources":["D:\\Projects\\Angular Projects\\OnlineFoodDelivery_WebApplication\\Food-Delivery-WebApp\\src\\app\\shared\\interceptors\\loading.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpEventType\n} from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\nimport { LoadingService } from 'src/app/services/loading.service';\n\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n\n\n  pendingRequest=0;\n  constructor(private loadingService:LoadingService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    \n    this.loadingService.showLoading()\n    this.pendingRequest=this.pendingRequest+1;\n    return next.handle(request).pipe(tap({\n  next:(event)=>{\n\n    if(event.type===HttpEventType.Response){\n    \n     this.handleHideLoading()\n    }\n  },\n  error:(_)=>{\n    this.handleHideLoading()\n  }\n\n    }))\n  }\n\n\n  handleHideLoading(){\n    this.pendingRequest=this.pendingRequest-1\n    if(this.pendingRequest===0)\n     this.loadingService.hideLoading()\n\n  }\n}\n"],"mappings":"AACA,SAKEA,aAAa,QACR,sBAAsB;AAC7B,SAAqBC,GAAG,QAAQ,MAAM;;;AAItC,OAAM,MAAOC,kBAAkB;EAI7BC,YAAoBC,cAA6B;IAA7B,KAAAA,cAAc,GAAdA,cAAc;IADlC,KAAAC,cAAc,GAAC,CAAC;EACoC;EAEpDC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IAExD,IAAI,CAACJ,cAAc,CAACK,WAAW,EAAE;IACjC,IAAI,CAACJ,cAAc,GAAC,IAAI,CAACA,cAAc,GAAC,CAAC;IACzC,OAAOG,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC,CAACI,IAAI,CAACV,GAAG,CAAC;MACvCO,IAAI,EAAEI,KAAK,IAAG;QAEZ,IAAGA,KAAK,CAACC,IAAI,KAAGb,aAAa,CAACc,QAAQ,EAAC;UAEtC,IAAI,CAACC,iBAAiB,EAAE;;MAE3B,CAAC;MACDC,KAAK,EAAEC,CAAC,IAAG;QACT,IAAI,CAACF,iBAAiB,EAAE;MAC1B;KAEG,CAAC,CAAC;EACL;EAGAA,iBAAiBA,CAAA;IACf,IAAI,CAACV,cAAc,GAAC,IAAI,CAACA,cAAc,GAAC,CAAC;IACzC,IAAG,IAAI,CAACA,cAAc,KAAG,CAAC,EACzB,IAAI,CAACD,cAAc,CAACc,WAAW,EAAE;EAEpC;;AA/BWhB,kBAAkB,C;mBAAlBA,kBAAkB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;AAAA;AAAlBpB,kBAAkB,C;SAAlBA,kBAAkB;EAAAqB,OAAA,EAAlBrB,kBAAkB,CAAAsB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}