{"ast":null,"code":"import _asyncToGenerator from \"D:/Projects/Angular Projects/OnlineFoodDelivery_WebApplication/Food-Delivery-WebApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Keeps track scripts that have been requested by loadScript.\n */\nlet cachedScripts = {};\n/**\n * Asynchronously loads a script keeping track of which scripts have already\n * requested and loaded.\n *\n * Multiple requests to the same resource will return the same promise.\n *\n * @param src Script URL to load\n */\nfunction loadScript(src) {\n  const existing = cachedScripts[src];\n  if (existing) {\n    return existing;\n  }\n  const promise = new Promise((resolve, reject) => {\n    // Create script\n    const script = document.createElement('script');\n    script.src = src;\n    script.async = true;\n    // Script event listener callbacks for load and error\n    const onScriptLoad = () => {\n      resolve();\n    };\n    const onScriptError = () => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      cleanup();\n      // Remove from cachedScripts so that we can try loading again\n      delete cachedScripts[src];\n      script.remove();\n      reject(new Error(`Unable to load script ${src}`));\n    };\n    script.addEventListener('load', onScriptLoad);\n    script.addEventListener('error', onScriptError);\n    // Add script to document body\n    document.body.appendChild(script);\n    // Remove event listeners on cleanup\n    function cleanup() {\n      script.removeEventListener('load', onScriptLoad);\n      script.removeEventListener('error', onScriptError);\n    }\n  });\n  cachedScripts[src] = promise;\n  return promise;\n}\n/**\n * Clears the script cache. Used for testing purposes only.\n */\nfunction clearScriptCache() {\n  cachedScripts = {};\n}\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Manages the lifecycle of the Google Pay button.\n *\n * Includes lifecycle management of the `PaymentsClient` instance,\n * `isReadyToPay`, `onClick`, `loadPaymentData`, and other callback methods.\n */\nclass ButtonManager {\n  constructor(options) {\n    var _this = this;\n    /**\n     * Handles the click event of the Google Pay button.\n     *\n     * This method would normally be private but has been made public for\n     * testing purposes.\n     *\n     * @private\n     */\n    this.handleClick = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        const config = _this.config;\n        if (!config) {\n          throw new Error('google-pay-button: Missing configuration');\n        }\n        const request = _this.createLoadPaymentDataRequest(config);\n        try {\n          if (config.onClick) {\n            config.onClick(event);\n          }\n          if (event.defaultPrevented) {\n            return;\n          }\n          const result = yield _this.client.loadPaymentData(request);\n          if (config.onLoadPaymentData) {\n            config.onLoadPaymentData(result);\n          }\n        } catch (err) {\n          if (err.statusCode === 'CANCELED') {\n            if (config.onCancel) {\n              config.onCancel(err);\n            }\n          } else if (config.onError) {\n            config.onError(err);\n          } else {\n            console.error(err);\n          }\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    this.options = options;\n  }\n  getElement() {\n    return this.element;\n  }\n  isGooglePayLoaded() {\n    return 'google' in (window || global) && !!google?.payments?.api?.PaymentsClient;\n  }\n  mount(element) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this2.isGooglePayLoaded()) {\n        try {\n          yield loadScript('https://pay.google.com/gp/p/js/pay.js');\n        } catch (err) {\n          if (_this2.config?.onError) {\n            _this2.config.onError(err);\n          } else {\n            console.error(err);\n          }\n          return;\n        }\n      }\n      _this2.element = element;\n      if (element) {\n        _this2.appendStyles();\n        if (_this2.config) {\n          _this2.updateElement();\n        }\n      }\n    })();\n  }\n  unmount() {\n    this.element = undefined;\n  }\n  configure(newConfig) {\n    let promise = undefined;\n    this.config = newConfig;\n    if (!this.oldInvalidationValues || this.isClientInvalidated(newConfig)) {\n      promise = this.updateElement();\n    }\n    this.oldInvalidationValues = this.getInvalidationValues(newConfig);\n    return promise ?? Promise.resolve();\n  }\n  /**\n   * Creates client configuration options based on button configuration\n   * options.\n   *\n   * This method would normally be private but has been made public for\n   * testing purposes.\n   *\n   * @private\n   */\n  createClientOptions(config) {\n    const clientConfig = {\n      environment: config.environment,\n      merchantInfo: this.createMerchantInfo(config)\n    };\n    if (config.onPaymentDataChanged || config.onPaymentAuthorized) {\n      clientConfig.paymentDataCallbacks = {};\n      if (config.onPaymentDataChanged) {\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n        clientConfig.paymentDataCallbacks.onPaymentDataChanged = paymentData => {\n          const result = config.onPaymentDataChanged(paymentData);\n          return result || {};\n        };\n      }\n      if (config.onPaymentAuthorized) {\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n        clientConfig.paymentDataCallbacks.onPaymentAuthorized = paymentData => {\n          const result = config.onPaymentAuthorized(paymentData);\n          return result || {};\n        };\n      }\n    }\n    return clientConfig;\n  }\n  createIsReadyToPayRequest(config) {\n    const paymentRequest = config.paymentRequest;\n    const request = {\n      apiVersion: paymentRequest.apiVersion,\n      apiVersionMinor: paymentRequest.apiVersionMinor,\n      allowedPaymentMethods: paymentRequest.allowedPaymentMethods,\n      existingPaymentMethodRequired: config.existingPaymentMethodRequired\n    };\n    return request;\n  }\n  /**\n   * Constructs `loadPaymentData` request object based on button configuration.\n   *\n   * It infers request properties like `shippingAddressRequired`,\n   * `shippingOptionRequired`, and `billingAddressRequired` if not already set\n   * based on the presence of their associated options and parameters. It also\n   * infers `callbackIntents` based on the callback methods defined in button\n   * configuration.\n   *\n   * This method would normally be private but has been made public for\n   * testing purposes.\n   *\n   * @private\n   */\n  createLoadPaymentDataRequest(config) {\n    const request = {\n      ...config.paymentRequest,\n      merchantInfo: this.createMerchantInfo(config)\n    };\n    // TODO: #13 re-enable inferrence if/when we agree as a team\n    return request;\n  }\n  createMerchantInfo(config) {\n    const merchantInfo = {\n      ...config.paymentRequest.merchantInfo\n    };\n    // apply softwareInfo if not set\n    if (!merchantInfo.softwareInfo) {\n      merchantInfo.softwareInfo = {\n        id: this.options.softwareInfoId,\n        version: this.options.softwareInfoVersion\n      };\n    }\n    return merchantInfo;\n  }\n  isMounted() {\n    return this.element != null && this.element.isConnected !== false;\n  }\n  removeButton() {\n    if (this.element instanceof ShadowRoot || this.element instanceof Element) {\n      for (const child of Array.from(this.element.children)) {\n        if (child.tagName !== 'STYLE') {\n          child.remove();\n        }\n      }\n    }\n  }\n  updateElement() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this3.isMounted()) return;\n      const element = _this3.getElement();\n      if (!_this3.config) {\n        throw new Error('google-pay-button: Missing configuration');\n      }\n      // remove existing button\n      _this3.removeButton();\n      try {\n        _this3.client = new google.payments.api.PaymentsClient(_this3.createClientOptions(_this3.config));\n      } catch (err) {\n        if (_this3.config.onError) {\n          _this3.config.onError(err);\n        } else {\n          console.error(err);\n        }\n        return;\n      }\n      const buttonOptions = {\n        buttonType: _this3.config.buttonType,\n        buttonColor: _this3.config.buttonColor,\n        buttonSizeMode: _this3.config.buttonSizeMode,\n        buttonLocale: _this3.config.buttonLocale,\n        onClick: _this3.handleClick,\n        allowedPaymentMethods: _this3.config.paymentRequest.allowedPaymentMethods\n      };\n      const rootNode = element.getRootNode();\n      if (rootNode instanceof ShadowRoot) {\n        buttonOptions.buttonRootNode = rootNode;\n      }\n      // pre-create button\n      const button = _this3.client.createButton(buttonOptions);\n      _this3.setClassName(element, [element.className, 'not-ready']);\n      element.appendChild(button);\n      let showButton = false;\n      let readyToPay;\n      try {\n        readyToPay = yield _this3.client.isReadyToPay(_this3.createIsReadyToPayRequest(_this3.config));\n        showButton = readyToPay.result && !_this3.config.existingPaymentMethodRequired || readyToPay.result && readyToPay.paymentMethodPresent && _this3.config.existingPaymentMethodRequired || false;\n      } catch (err) {\n        if (_this3.config.onError) {\n          _this3.config.onError(err);\n        } else {\n          console.error(err);\n        }\n      }\n      if (!_this3.isMounted()) return;\n      if (showButton) {\n        try {\n          _this3.client.prefetchPaymentData(_this3.createLoadPaymentDataRequest(_this3.config));\n        } catch (err) {\n          console.log('Error with prefetch', err);\n        }\n        // remove hidden className\n        _this3.setClassName(element, (element.className || '').split(' ').filter(className => className && className !== 'not-ready'));\n      }\n      if (_this3.isReadyToPay !== readyToPay?.result || _this3.paymentMethodPresent !== readyToPay?.paymentMethodPresent) {\n        _this3.isReadyToPay = !!readyToPay?.result;\n        _this3.paymentMethodPresent = readyToPay?.paymentMethodPresent;\n        if (_this3.config.onReadyToPayChange) {\n          const readyToPayResponse = {\n            isButtonVisible: showButton,\n            isReadyToPay: _this3.isReadyToPay\n          };\n          if (_this3.paymentMethodPresent) {\n            readyToPayResponse.paymentMethodPresent = _this3.paymentMethodPresent;\n          }\n          _this3.config.onReadyToPayChange(readyToPayResponse);\n        }\n      }\n    })();\n  }\n  setClassName(element, classNames) {\n    const className = classNames.filter(name => name).join(' ');\n    if (className) {\n      element.className = className;\n    } else {\n      element.removeAttribute('class');\n    }\n  }\n  appendStyles() {\n    if (typeof document === 'undefined') return;\n    const rootNode = this.element?.getRootNode();\n    const styleId = `default-google-style-${this.options.cssSelector.replace(/[^\\w-]+/g, '')}-${this.config?.buttonLocale}`;\n    // initialize styles if rendering on the client:\n    if (rootNode) {\n      if (!rootNode.getElementById?.(styleId)) {\n        const style = document.createElement('style');\n        style.id = styleId;\n        style.type = 'text/css';\n        style.innerHTML = `\n          ${this.options.cssSelector} {\n            display: inline-block;\n          }\n          ${this.options.cssSelector}.not-ready {\n            width: 0;\n            height: 0;\n            overflow: hidden;\n          }\n        `;\n        if (rootNode instanceof Document && rootNode.head) {\n          rootNode.head.appendChild(style);\n        } else {\n          rootNode.appendChild(style);\n        }\n      }\n    }\n  }\n  isClientInvalidated(newConfig) {\n    if (!this.oldInvalidationValues) return true;\n    const newValues = this.getInvalidationValues(newConfig);\n    return newValues.some((value, index) => JSON.stringify(value) !== JSON.stringify(this.oldInvalidationValues[index]));\n  }\n  getInvalidationValues(config) {\n    return [config.environment, config.existingPaymentMethodRequired, !!config.onPaymentDataChanged, !!config.onPaymentAuthorized, config.buttonColor, config.buttonType, config.buttonLocale, config.buttonSizeMode, config.paymentRequest.merchantInfo.merchantId, config.paymentRequest.merchantInfo.merchantName, config.paymentRequest.merchantInfo.softwareInfo?.id, config.paymentRequest.merchantInfo.softwareInfo?.version, config.paymentRequest.allowedPaymentMethods];\n  }\n}\nvar name = \"@google-pay/button-angular\";\nvar version = \"3.0.10\";\nvar description = \"Angular component for Google Pay button\";\nvar repository = {\n  type: \"git\",\n  url: \"https://github.com/google-pay/google-pay-button\",\n  directory: \"src/button-angular\"\n};\nvar homepage = \"https://github.com/google-pay/google-pay-button/tree/main/src/button-angular#readme\";\nvar engines = {\n  node: \">=8.0.0\"\n};\nvar author = \"socsieng@google.com\";\nvar license = \"Apache-2.0\";\nvar scripts = {\n  build: \"ng build --configuration production\"\n};\nvar dependencies = {\n  \"@types/googlepay\": \"^0.7.0\"\n};\nvar peerDependencies = {\n  \"@angular/core\": \">=8.0.0\",\n  \"@types/googlepay\": \"^0.7.0\"\n};\nvar files = [\"esm2020/*\", \"fesm2015/*\", \"fesm2020/*\", \"lib/*\", \"button-angular/*\", \"google-pay-button-angular.*\", \"*.d.ts\", \"*.json\", \"README.md\"];\nvar keywords = [\"googlepay\", \"google-pay\", \"google-pay-button\", \"button\", \"angular\"];\nvar devDependencies = {\n  \"@angular-devkit/build-ng-packagr\": \"^0.1002.0\",\n  \"@angular/core\": \"^10.2.2\",\n  \"ng-packagr\": \"^10.1.2\"\n};\nvar _package = {\n  name: name,\n  version: version,\n  description: description,\n  repository: repository,\n  homepage: homepage,\n  engines: engines,\n  author: author,\n  license: license,\n  scripts: scripts,\n  dependencies: dependencies,\n  peerDependencies: peerDependencies,\n  files: files,\n  keywords: keywords,\n  devDependencies: devDependencies\n};\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a new function that delays invocations to the original function\n * within a specified wait period. The last invocation within this time period\n * gets invoked. All earlier invocations are ignore.\n *\n * @param func The function to invoke.\n * @param wait The time in milliseconds to wait for idle invocations.\n */\nfunction debounce(func, wait = 0) {\n  let timeout;\n  return function (...args) {\n    window.clearTimeout(timeout);\n    const later = function () {\n      timeout = undefined;\n      return func(...args);\n    };\n    return new Promise(resolve => {\n      timeout = window.setTimeout(() => {\n        const result = later();\n        resolve(result);\n      }, wait);\n    });\n  };\n}\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass GooglePayButtonComponent {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.manager = new ButtonManager({\n      cssSelector: 'google-pay-button',\n      softwareInfoId: name,\n      softwareInfoVersion: version\n    });\n    this.initializeButton = debounce(() => {\n      if (!this.assertRequiredProperty('paymentRequest')) {\n        return;\n      }\n      if (!this.assertRequiredProperty('environment')) {\n        return;\n      }\n      const config = {\n        paymentRequest: this.paymentRequest,\n        environment: this.environment,\n        existingPaymentMethodRequired: this.existingPaymentMethodRequired,\n        onPaymentDataChanged: this.paymentDataChangedCallback,\n        onPaymentAuthorized: this.paymentAuthorizedCallback,\n        buttonColor: this.buttonColor,\n        buttonType: this.buttonType,\n        buttonSizeMode: this.buttonSizeMode,\n        buttonLocale: this.buttonLocale,\n        onReadyToPayChange: result => {\n          if (this.readyToPayChangeCallback) {\n            this.readyToPayChangeCallback(result);\n          }\n          this.dispatch('readytopaychange', result);\n        },\n        onCancel: reason => {\n          if (this.cancelCallback) {\n            this.cancelCallback(reason);\n          }\n          this.dispatch('cancel', reason);\n        },\n        onError: error => {\n          if (this.errorCallback) {\n            this.errorCallback?.(error);\n          }\n          this.elementRef.nativeElement.dispatchEvent(new ErrorEvent('error', {\n            error\n          }));\n        },\n        onLoadPaymentData: paymentData => {\n          if (this.loadPaymentDataCallback) {\n            this.loadPaymentDataCallback(paymentData);\n          }\n          this.dispatch('loadpaymentdata', paymentData);\n        },\n        onClick: event => {\n          if (this.clickCallback) {\n            this.clickCallback?.(event);\n          }\n        }\n      };\n      this.manager.configure(config);\n    });\n  }\n  get isReadyToPay() {\n    return this.manager.isReadyToPay;\n  }\n  ngOnInit() {\n    return this.manager.mount(this.elementRef.nativeElement);\n  }\n  ngOnChanges() {\n    return this.initializeButton();\n  }\n  assertRequiredProperty(name) {\n    const value = this[name];\n    if (value === null || value === undefined) {\n      this.throwError(Error(`Required property not set: ${name}`));\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Throws an error.\n   *\n   * Used for testing purposes so that the method can be spied on.\n   */\n  throwError(error) {\n    throw error;\n  }\n  dispatch(type, detail) {\n    this.elementRef.nativeElement.dispatchEvent(new CustomEvent(type, {\n      bubbles: true,\n      cancelable: false,\n      detail\n    }));\n  }\n}\nGooglePayButtonComponent.ɵfac = function GooglePayButtonComponent_Factory(t) {\n  return new (t || GooglePayButtonComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nGooglePayButtonComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: GooglePayButtonComponent,\n  selectors: [[\"google-pay-button\"]],\n  inputs: {\n    paymentRequest: \"paymentRequest\",\n    environment: \"environment\",\n    existingPaymentMethodRequired: \"existingPaymentMethodRequired\",\n    buttonColor: \"buttonColor\",\n    buttonType: \"buttonType\",\n    buttonSizeMode: \"buttonSizeMode\",\n    buttonLocale: \"buttonLocale\",\n    paymentDataChangedCallback: \"paymentDataChangedCallback\",\n    paymentAuthorizedCallback: \"paymentAuthorizedCallback\",\n    readyToPayChangeCallback: \"readyToPayChangeCallback\",\n    loadPaymentDataCallback: \"loadPaymentDataCallback\",\n    cancelCallback: \"cancelCallback\",\n    errorCallback: \"errorCallback\",\n    clickCallback: \"clickCallback\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GooglePayButtonComponent, [{\n    type: Directive,\n    args: [{\n      selector: 'google-pay-button'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    paymentRequest: [{\n      type: Input\n    }],\n    environment: [{\n      type: Input\n    }],\n    existingPaymentMethodRequired: [{\n      type: Input\n    }],\n    buttonColor: [{\n      type: Input\n    }],\n    buttonType: [{\n      type: Input\n    }],\n    buttonSizeMode: [{\n      type: Input\n    }],\n    buttonLocale: [{\n      type: Input\n    }],\n    paymentDataChangedCallback: [{\n      type: Input\n    }],\n    paymentAuthorizedCallback: [{\n      type: Input\n    }],\n    readyToPayChangeCallback: [{\n      type: Input\n    }],\n    loadPaymentDataCallback: [{\n      type: Input\n    }],\n    cancelCallback: [{\n      type: Input\n    }],\n    errorCallback: [{\n      type: Input\n    }],\n    clickCallback: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass GooglePayButtonModule {}\nGooglePayButtonModule.ɵfac = function GooglePayButtonModule_Factory(t) {\n  return new (t || GooglePayButtonModule)();\n};\nGooglePayButtonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GooglePayButtonModule\n});\nGooglePayButtonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GooglePayButtonModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GooglePayButtonComponent],\n      imports: [],\n      exports: [GooglePayButtonComponent]\n    }]\n  }], null, null);\n})();\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GooglePayButtonComponent, GooglePayButtonModule };","map":{"version":3,"names":["i0","Directive","Input","NgModule","cachedScripts","loadScript","src","existing","promise","Promise","resolve","reject","script","document","createElement","async","onScriptLoad","onScriptError","cleanup","remove","Error","addEventListener","body","appendChild","removeEventListener","clearScriptCache","ButtonManager","constructor","options","_this","handleClick","_ref","_asyncToGenerator","event","config","request","createLoadPaymentDataRequest","onClick","defaultPrevented","result","client","loadPaymentData","onLoadPaymentData","err","statusCode","onCancel","onError","console","error","_x","apply","arguments","getElement","element","isGooglePayLoaded","window","global","google","payments","api","PaymentsClient","mount","_this2","appendStyles","updateElement","unmount","undefined","configure","newConfig","oldInvalidationValues","isClientInvalidated","getInvalidationValues","createClientOptions","clientConfig","environment","merchantInfo","createMerchantInfo","onPaymentDataChanged","onPaymentAuthorized","paymentDataCallbacks","paymentData","createIsReadyToPayRequest","paymentRequest","apiVersion","apiVersionMinor","allowedPaymentMethods","existingPaymentMethodRequired","softwareInfo","id","softwareInfoId","version","softwareInfoVersion","isMounted","isConnected","removeButton","ShadowRoot","Element","child","Array","from","children","tagName","_this3","buttonOptions","buttonType","buttonColor","buttonSizeMode","buttonLocale","rootNode","getRootNode","buttonRootNode","button","createButton","setClassName","className","showButton","readyToPay","isReadyToPay","paymentMethodPresent","prefetchPaymentData","log","split","filter","onReadyToPayChange","readyToPayResponse","isButtonVisible","classNames","name","join","removeAttribute","styleId","cssSelector","replace","getElementById","style","type","innerHTML","Document","head","newValues","some","value","index","JSON","stringify","merchantId","merchantName","description","repository","url","directory","homepage","engines","node","author","license","scripts","build","dependencies","peerDependencies","files","keywords","devDependencies","_package","debounce","func","wait","timeout","args","clearTimeout","later","setTimeout","GooglePayButtonComponent","elementRef","manager","initializeButton","assertRequiredProperty","paymentDataChangedCallback","paymentAuthorizedCallback","readyToPayChangeCallback","dispatch","reason","cancelCallback","errorCallback","nativeElement","dispatchEvent","ErrorEvent","loadPaymentDataCallback","clickCallback","ngOnInit","ngOnChanges","throwError","detail","CustomEvent","bubbles","cancelable","ɵfac","GooglePayButtonComponent_Factory","t","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","selectors","inputs","features","ɵɵNgOnChangesFeature","ngDevMode","ɵsetClassMetadata","selector","GooglePayButtonModule","GooglePayButtonModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","declarations","imports","exports"],"sources":["D:/Projects/Angular Projects/OnlineFoodDelivery_WebApplication/Food-Delivery-WebApp/node_modules/@google-pay/button-angular/fesm2020/google-pay-button-angular.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Keeps track scripts that have been requested by loadScript.\n */\nlet cachedScripts = {};\n/**\n * Asynchronously loads a script keeping track of which scripts have already\n * requested and loaded.\n *\n * Multiple requests to the same resource will return the same promise.\n *\n * @param src Script URL to load\n */\nfunction loadScript(src) {\n    const existing = cachedScripts[src];\n    if (existing) {\n        return existing;\n    }\n    const promise = new Promise((resolve, reject) => {\n        // Create script\n        const script = document.createElement('script');\n        script.src = src;\n        script.async = true;\n        // Script event listener callbacks for load and error\n        const onScriptLoad = () => {\n            resolve();\n        };\n        const onScriptError = () => {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            cleanup();\n            // Remove from cachedScripts so that we can try loading again\n            delete cachedScripts[src];\n            script.remove();\n            reject(new Error(`Unable to load script ${src}`));\n        };\n        script.addEventListener('load', onScriptLoad);\n        script.addEventListener('error', onScriptError);\n        // Add script to document body\n        document.body.appendChild(script);\n        // Remove event listeners on cleanup\n        function cleanup() {\n            script.removeEventListener('load', onScriptLoad);\n            script.removeEventListener('error', onScriptError);\n        }\n    });\n    cachedScripts[src] = promise;\n    return promise;\n}\n/**\n * Clears the script cache. Used for testing purposes only.\n */\nfunction clearScriptCache() {\n    cachedScripts = {};\n}\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Manages the lifecycle of the Google Pay button.\n *\n * Includes lifecycle management of the `PaymentsClient` instance,\n * `isReadyToPay`, `onClick`, `loadPaymentData`, and other callback methods.\n */\nclass ButtonManager {\n    constructor(options) {\n        /**\n         * Handles the click event of the Google Pay button.\n         *\n         * This method would normally be private but has been made public for\n         * testing purposes.\n         *\n         * @private\n         */\n        this.handleClick = async (event) => {\n            const config = this.config;\n            if (!config) {\n                throw new Error('google-pay-button: Missing configuration');\n            }\n            const request = this.createLoadPaymentDataRequest(config);\n            try {\n                if (config.onClick) {\n                    config.onClick(event);\n                }\n                if (event.defaultPrevented) {\n                    return;\n                }\n                const result = await this.client.loadPaymentData(request);\n                if (config.onLoadPaymentData) {\n                    config.onLoadPaymentData(result);\n                }\n            }\n            catch (err) {\n                if (err.statusCode === 'CANCELED') {\n                    if (config.onCancel) {\n                        config.onCancel(err);\n                    }\n                }\n                else if (config.onError) {\n                    config.onError(err);\n                }\n                else {\n                    console.error(err);\n                }\n            }\n        };\n        this.options = options;\n    }\n    getElement() {\n        return this.element;\n    }\n    isGooglePayLoaded() {\n        return 'google' in (window || global) && !!google?.payments?.api?.PaymentsClient;\n    }\n    async mount(element) {\n        if (!this.isGooglePayLoaded()) {\n            try {\n                await loadScript('https://pay.google.com/gp/p/js/pay.js');\n            }\n            catch (err) {\n                if (this.config?.onError) {\n                    this.config.onError(err);\n                }\n                else {\n                    console.error(err);\n                }\n                return;\n            }\n        }\n        this.element = element;\n        if (element) {\n            this.appendStyles();\n            if (this.config) {\n                this.updateElement();\n            }\n        }\n    }\n    unmount() {\n        this.element = undefined;\n    }\n    configure(newConfig) {\n        let promise = undefined;\n        this.config = newConfig;\n        if (!this.oldInvalidationValues || this.isClientInvalidated(newConfig)) {\n            promise = this.updateElement();\n        }\n        this.oldInvalidationValues = this.getInvalidationValues(newConfig);\n        return promise ?? Promise.resolve();\n    }\n    /**\n     * Creates client configuration options based on button configuration\n     * options.\n     *\n     * This method would normally be private but has been made public for\n     * testing purposes.\n     *\n     * @private\n     */\n    createClientOptions(config) {\n        const clientConfig = {\n            environment: config.environment,\n            merchantInfo: this.createMerchantInfo(config),\n        };\n        if (config.onPaymentDataChanged || config.onPaymentAuthorized) {\n            clientConfig.paymentDataCallbacks = {};\n            if (config.onPaymentDataChanged) {\n                // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n                clientConfig.paymentDataCallbacks.onPaymentDataChanged = paymentData => {\n                    const result = config.onPaymentDataChanged(paymentData);\n                    return result || {};\n                };\n            }\n            if (config.onPaymentAuthorized) {\n                // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n                clientConfig.paymentDataCallbacks.onPaymentAuthorized = paymentData => {\n                    const result = config.onPaymentAuthorized(paymentData);\n                    return result || {};\n                };\n            }\n        }\n        return clientConfig;\n    }\n    createIsReadyToPayRequest(config) {\n        const paymentRequest = config.paymentRequest;\n        const request = {\n            apiVersion: paymentRequest.apiVersion,\n            apiVersionMinor: paymentRequest.apiVersionMinor,\n            allowedPaymentMethods: paymentRequest.allowedPaymentMethods,\n            existingPaymentMethodRequired: config.existingPaymentMethodRequired,\n        };\n        return request;\n    }\n    /**\n     * Constructs `loadPaymentData` request object based on button configuration.\n     *\n     * It infers request properties like `shippingAddressRequired`,\n     * `shippingOptionRequired`, and `billingAddressRequired` if not already set\n     * based on the presence of their associated options and parameters. It also\n     * infers `callbackIntents` based on the callback methods defined in button\n     * configuration.\n     *\n     * This method would normally be private but has been made public for\n     * testing purposes.\n     *\n     * @private\n     */\n    createLoadPaymentDataRequest(config) {\n        const request = {\n            ...config.paymentRequest,\n            merchantInfo: this.createMerchantInfo(config),\n        };\n        // TODO: #13 re-enable inferrence if/when we agree as a team\n        return request;\n    }\n    createMerchantInfo(config) {\n        const merchantInfo = {\n            ...config.paymentRequest.merchantInfo,\n        };\n        // apply softwareInfo if not set\n        if (!merchantInfo.softwareInfo) {\n            merchantInfo.softwareInfo = {\n                id: this.options.softwareInfoId,\n                version: this.options.softwareInfoVersion,\n            };\n        }\n        return merchantInfo;\n    }\n    isMounted() {\n        return this.element != null && this.element.isConnected !== false;\n    }\n    removeButton() {\n        if (this.element instanceof ShadowRoot || this.element instanceof Element) {\n            for (const child of Array.from(this.element.children)) {\n                if (child.tagName !== 'STYLE') {\n                    child.remove();\n                }\n            }\n        }\n    }\n    async updateElement() {\n        if (!this.isMounted())\n            return;\n        const element = this.getElement();\n        if (!this.config) {\n            throw new Error('google-pay-button: Missing configuration');\n        }\n        // remove existing button\n        this.removeButton();\n        try {\n            this.client = new google.payments.api.PaymentsClient(this.createClientOptions(this.config));\n        }\n        catch (err) {\n            if (this.config.onError) {\n                this.config.onError(err);\n            }\n            else {\n                console.error(err);\n            }\n            return;\n        }\n        const buttonOptions = {\n            buttonType: this.config.buttonType,\n            buttonColor: this.config.buttonColor,\n            buttonSizeMode: this.config.buttonSizeMode,\n            buttonLocale: this.config.buttonLocale,\n            onClick: this.handleClick,\n            allowedPaymentMethods: this.config.paymentRequest.allowedPaymentMethods,\n        };\n        const rootNode = element.getRootNode();\n        if (rootNode instanceof ShadowRoot) {\n            buttonOptions.buttonRootNode = rootNode;\n        }\n        // pre-create button\n        const button = this.client.createButton(buttonOptions);\n        this.setClassName(element, [element.className, 'not-ready']);\n        element.appendChild(button);\n        let showButton = false;\n        let readyToPay;\n        try {\n            readyToPay = await this.client.isReadyToPay(this.createIsReadyToPayRequest(this.config));\n            showButton =\n                (readyToPay.result && !this.config.existingPaymentMethodRequired)\n                    || (readyToPay.result && readyToPay.paymentMethodPresent && this.config.existingPaymentMethodRequired)\n                    || false;\n        }\n        catch (err) {\n            if (this.config.onError) {\n                this.config.onError(err);\n            }\n            else {\n                console.error(err);\n            }\n        }\n        if (!this.isMounted())\n            return;\n        if (showButton) {\n            try {\n                this.client.prefetchPaymentData(this.createLoadPaymentDataRequest(this.config));\n            }\n            catch (err) {\n                console.log('Error with prefetch', err);\n            }\n            // remove hidden className\n            this.setClassName(element, (element.className || '').split(' ').filter(className => className && className !== 'not-ready'));\n        }\n        if (this.isReadyToPay !== readyToPay?.result || this.paymentMethodPresent !== readyToPay?.paymentMethodPresent) {\n            this.isReadyToPay = !!readyToPay?.result;\n            this.paymentMethodPresent = readyToPay?.paymentMethodPresent;\n            if (this.config.onReadyToPayChange) {\n                const readyToPayResponse = {\n                    isButtonVisible: showButton,\n                    isReadyToPay: this.isReadyToPay,\n                };\n                if (this.paymentMethodPresent) {\n                    readyToPayResponse.paymentMethodPresent = this.paymentMethodPresent;\n                }\n                this.config.onReadyToPayChange(readyToPayResponse);\n            }\n        }\n    }\n    setClassName(element, classNames) {\n        const className = classNames.filter(name => name).join(' ');\n        if (className) {\n            element.className = className;\n        }\n        else {\n            element.removeAttribute('class');\n        }\n    }\n    appendStyles() {\n        if (typeof document === 'undefined')\n            return;\n        const rootNode = this.element?.getRootNode();\n        const styleId = `default-google-style-${this.options.cssSelector.replace(/[^\\w-]+/g, '')}-${this.config?.buttonLocale}`;\n        // initialize styles if rendering on the client:\n        if (rootNode) {\n            if (!rootNode.getElementById?.(styleId)) {\n                const style = document.createElement('style');\n                style.id = styleId;\n                style.type = 'text/css';\n                style.innerHTML = `\n          ${this.options.cssSelector} {\n            display: inline-block;\n          }\n          ${this.options.cssSelector}.not-ready {\n            width: 0;\n            height: 0;\n            overflow: hidden;\n          }\n        `;\n                if (rootNode instanceof Document && rootNode.head) {\n                    rootNode.head.appendChild(style);\n                }\n                else {\n                    rootNode.appendChild(style);\n                }\n            }\n        }\n    }\n    isClientInvalidated(newConfig) {\n        if (!this.oldInvalidationValues)\n            return true;\n        const newValues = this.getInvalidationValues(newConfig);\n        return newValues.some((value, index) => JSON.stringify(value) !== JSON.stringify(this.oldInvalidationValues[index]));\n    }\n    getInvalidationValues(config) {\n        return [\n            config.environment,\n            config.existingPaymentMethodRequired,\n            !!config.onPaymentDataChanged,\n            !!config.onPaymentAuthorized,\n            config.buttonColor,\n            config.buttonType,\n            config.buttonLocale,\n            config.buttonSizeMode,\n            config.paymentRequest.merchantInfo.merchantId,\n            config.paymentRequest.merchantInfo.merchantName,\n            config.paymentRequest.merchantInfo.softwareInfo?.id,\n            config.paymentRequest.merchantInfo.softwareInfo?.version,\n            config.paymentRequest.allowedPaymentMethods,\n        ];\n    }\n}\n\nvar name = \"@google-pay/button-angular\";\nvar version = \"3.0.10\";\nvar description = \"Angular component for Google Pay button\";\nvar repository = {\n\ttype: \"git\",\n\turl: \"https://github.com/google-pay/google-pay-button\",\n\tdirectory: \"src/button-angular\"\n};\nvar homepage = \"https://github.com/google-pay/google-pay-button/tree/main/src/button-angular#readme\";\nvar engines = {\n\tnode: \">=8.0.0\"\n};\nvar author = \"socsieng@google.com\";\nvar license = \"Apache-2.0\";\nvar scripts = {\n\tbuild: \"ng build --configuration production\"\n};\nvar dependencies = {\n\t\"@types/googlepay\": \"^0.7.0\"\n};\nvar peerDependencies = {\n\t\"@angular/core\": \">=8.0.0\",\n\t\"@types/googlepay\": \"^0.7.0\"\n};\nvar files = [\n\t\"esm2020/*\",\n\t\"fesm2015/*\",\n\t\"fesm2020/*\",\n\t\"lib/*\",\n\t\"button-angular/*\",\n\t\"google-pay-button-angular.*\",\n\t\"*.d.ts\",\n\t\"*.json\",\n\t\"README.md\"\n];\nvar keywords = [\n\t\"googlepay\",\n\t\"google-pay\",\n\t\"google-pay-button\",\n\t\"button\",\n\t\"angular\"\n];\nvar devDependencies = {\n\t\"@angular-devkit/build-ng-packagr\": \"^0.1002.0\",\n\t\"@angular/core\": \"^10.2.2\",\n\t\"ng-packagr\": \"^10.1.2\"\n};\nvar _package = {\n\tname: name,\n\tversion: version,\n\tdescription: description,\n\trepository: repository,\n\thomepage: homepage,\n\tengines: engines,\n\tauthor: author,\n\tlicense: license,\n\tscripts: scripts,\n\tdependencies: dependencies,\n\tpeerDependencies: peerDependencies,\n\tfiles: files,\n\tkeywords: keywords,\n\tdevDependencies: devDependencies\n};\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a new function that delays invocations to the original function\n * within a specified wait period. The last invocation within this time period\n * gets invoked. All earlier invocations are ignore.\n *\n * @param func The function to invoke.\n * @param wait The time in milliseconds to wait for idle invocations.\n */\nfunction debounce(func, wait = 0) {\n    let timeout;\n    return function (...args) {\n        window.clearTimeout(timeout);\n        const later = function () {\n            timeout = undefined;\n            return func(...args);\n        };\n        return new Promise(resolve => {\n            timeout = window.setTimeout(() => {\n                const result = later();\n                resolve(result);\n            }, wait);\n        });\n    };\n}\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass GooglePayButtonComponent {\n    constructor(elementRef) {\n        this.elementRef = elementRef;\n        this.manager = new ButtonManager({\n            cssSelector: 'google-pay-button',\n            softwareInfoId: name,\n            softwareInfoVersion: version,\n        });\n        this.initializeButton = debounce(() => {\n            if (!this.assertRequiredProperty('paymentRequest')) {\n                return;\n            }\n            if (!this.assertRequiredProperty('environment')) {\n                return;\n            }\n            const config = {\n                paymentRequest: this.paymentRequest,\n                environment: this.environment,\n                existingPaymentMethodRequired: this.existingPaymentMethodRequired,\n                onPaymentDataChanged: this.paymentDataChangedCallback,\n                onPaymentAuthorized: this.paymentAuthorizedCallback,\n                buttonColor: this.buttonColor,\n                buttonType: this.buttonType,\n                buttonSizeMode: this.buttonSizeMode,\n                buttonLocale: this.buttonLocale,\n                onReadyToPayChange: result => {\n                    if (this.readyToPayChangeCallback) {\n                        this.readyToPayChangeCallback(result);\n                    }\n                    this.dispatch('readytopaychange', result);\n                },\n                onCancel: reason => {\n                    if (this.cancelCallback) {\n                        this.cancelCallback(reason);\n                    }\n                    this.dispatch('cancel', reason);\n                },\n                onError: error => {\n                    if (this.errorCallback) {\n                        this.errorCallback?.(error);\n                    }\n                    this.elementRef.nativeElement.dispatchEvent(new ErrorEvent('error', { error }));\n                },\n                onLoadPaymentData: paymentData => {\n                    if (this.loadPaymentDataCallback) {\n                        this.loadPaymentDataCallback(paymentData);\n                    }\n                    this.dispatch('loadpaymentdata', paymentData);\n                },\n                onClick: event => {\n                    if (this.clickCallback) {\n                        this.clickCallback?.(event);\n                    }\n                },\n            };\n            this.manager.configure(config);\n        });\n    }\n    get isReadyToPay() {\n        return this.manager.isReadyToPay;\n    }\n    ngOnInit() {\n        return this.manager.mount(this.elementRef.nativeElement);\n    }\n    ngOnChanges() {\n        return this.initializeButton();\n    }\n    assertRequiredProperty(name) {\n        const value = this[name];\n        if (value === null || value === undefined) {\n            this.throwError(Error(`Required property not set: ${name}`));\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Throws an error.\n     *\n     * Used for testing purposes so that the method can be spied on.\n     */\n    throwError(error) {\n        throw error;\n    }\n    dispatch(type, detail) {\n        this.elementRef.nativeElement.dispatchEvent(new CustomEvent(type, {\n            bubbles: true,\n            cancelable: false,\n            detail,\n        }));\n    }\n}\nGooglePayButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: GooglePayButtonComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nGooglePayButtonComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: GooglePayButtonComponent, selector: \"google-pay-button\", inputs: { paymentRequest: \"paymentRequest\", environment: \"environment\", existingPaymentMethodRequired: \"existingPaymentMethodRequired\", buttonColor: \"buttonColor\", buttonType: \"buttonType\", buttonSizeMode: \"buttonSizeMode\", buttonLocale: \"buttonLocale\", paymentDataChangedCallback: \"paymentDataChangedCallback\", paymentAuthorizedCallback: \"paymentAuthorizedCallback\", readyToPayChangeCallback: \"readyToPayChangeCallback\", loadPaymentDataCallback: \"loadPaymentDataCallback\", cancelCallback: \"cancelCallback\", errorCallback: \"errorCallback\", clickCallback: \"clickCallback\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: GooglePayButtonComponent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'google-pay-button',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { paymentRequest: [{\n                type: Input\n            }], environment: [{\n                type: Input\n            }], existingPaymentMethodRequired: [{\n                type: Input\n            }], buttonColor: [{\n                type: Input\n            }], buttonType: [{\n                type: Input\n            }], buttonSizeMode: [{\n                type: Input\n            }], buttonLocale: [{\n                type: Input\n            }], paymentDataChangedCallback: [{\n                type: Input\n            }], paymentAuthorizedCallback: [{\n                type: Input\n            }], readyToPayChangeCallback: [{\n                type: Input\n            }], loadPaymentDataCallback: [{\n                type: Input\n            }], cancelCallback: [{\n                type: Input\n            }], errorCallback: [{\n                type: Input\n            }], clickCallback: [{\n                type: Input\n            }] } });\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass GooglePayButtonModule {\n}\nGooglePayButtonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: GooglePayButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGooglePayButtonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: GooglePayButtonModule, declarations: [GooglePayButtonComponent], exports: [GooglePayButtonComponent] });\nGooglePayButtonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: GooglePayButtonModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: GooglePayButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [GooglePayButtonComponent],\n                    imports: [],\n                    exports: [GooglePayButtonComponent],\n                }]\n        }] });\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GooglePayButtonComponent, GooglePayButtonModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}