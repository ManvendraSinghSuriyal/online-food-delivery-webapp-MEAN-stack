{"ast":null,"code":"import { Cart } from '../shared/models/Cart';\nimport { CartItem } from '../shared/models/CartItem';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nexport class CartService {\n  constructor(userService) {\n    this.userService = userService;\n    // cart:Cart=new Cart();\n    // using localstorage to avoid disappearing cart after page refresh\n    this.cart = this.getCartFromLocalStorage();\n    this.cartSubject = new BehaviorSubject(this.cart);\n  }\n  addToCart(food) {\n    let cartItem = this.cart.items.find(item => item.food.id === food.id);\n    if (cartItem) return;\n    this.userService.userObservable.subscribe(newUser => {\n      this.cart.user = newUser;\n    });\n    this.cart.items.push(new CartItem(food));\n    this.setCartToLocalStorage();\n  }\n  removeFromCart(foodId) {\n    this.cart.items = this.cart.items.filter(item => item.food.id != foodId);\n    this.setCartToLocalStorage();\n  }\n  changeQuantity(foodId, quantity) {\n    let cartItem = this.cart.items.find(item => item.food.id === foodId);\n    if (!cartItem) return;\n    cartItem.quantity = quantity;\n    cartItem.price = quantity * cartItem.food.price;\n    this.setCartToLocalStorage();\n  }\n  clearCart() {\n    this.cart = new Cart();\n    this.setCartToLocalStorage();\n  }\n  getCartObservable() {\n    return this.cartSubject.asObservable();\n  }\n  setCartToLocalStorage() {\n    // reduce just reducr the result into a single value and jsut use accumulator, current value and intial value so current vaue will be the value of array and accumulator just store the result so here its like total=total+price for all price in cartItem entries\n    this.cart.totalPrice = this.cart.items.reduce((prev, currentItem) => prev + currentItem.price, 0);\n    this.cart.totalCount = this.cart.items.reduce((prev, currentItem) => prev + currentItem.quantity, 0);\n    this.cart.items.reduce((prev, currentItem) => prev + currentItem.quantity, 0);\n    this.cart.items.reduce((prev, currentItem) => prev + currentItem.quantity, 0);\n    const cartJson = JSON.stringify(this.cart);\n    localStorage.setItem('Cart', cartJson);\n    this.cartSubject.next(this.cart);\n  }\n  getCartFromLocalStorage() {\n    const cart = localStorage.getItem('Cart');\n    // this below will avoid disapperaing of cart when page refreshed as we are using local storage to get the cart and if cart empty then its returninga fresh cart object\n    return cart ? JSON.parse(cart) : new Cart();\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.UserService));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Cart","CartItem","BehaviorSubject","CartService","constructor","userService","cart","getCartFromLocalStorage","cartSubject","addToCart","food","cartItem","items","find","item","id","userObservable","subscribe","newUser","user","push","setCartToLocalStorage","removeFromCart","foodId","filter","changeQuantity","quantity","price","clearCart","getCartObservable","asObservable","totalPrice","reduce","prev","currentItem","totalCount","cartJson","JSON","stringify","localStorage","setItem","next","getItem","parse","i0","ɵɵinject","i1","UserService","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\Angular Projects\\OnlineFoodDelivery_WebApplication\\Food-Delivery-WebApp\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cart } from '../shared/models/Cart';\nimport { Food } from '../shared/models/Food';\nimport { CartItem } from '../shared/models/CartItem';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { UserService } from './user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  // cart:Cart=new Cart();\n\n  // using localstorage to avoid disappearing cart after page refresh\n  private cart: Cart = this.getCartFromLocalStorage();\n  cartSubject:BehaviorSubject<Cart>=new BehaviorSubject(this.cart);\n  constructor(private userService:UserService) { }\n\n\n  addToCart(food:Food){\n\n\n    let cartItem=this.cart.items.find(item=>item.food.id===food.id)\n   if(cartItem)\n   return;\n\n this.userService.userObservable.subscribe((newUser)=>{\n\n  this.cart.user=newUser\n })\n   this.cart.items.push(new CartItem(food))\n   this.setCartToLocalStorage();\n    \n  }\n\n\n  removeFromCart(foodId:string){\n\n    this.cart.items=this.cart.items.filter(item=>item.food.id!=foodId)\nthis.setCartToLocalStorage();\n  }\n\n  changeQuantity(foodId:String,quantity:number){\n   let cartItem=  this.cart.items.find(item=>item.food.id===foodId);\n   if(!cartItem)\n     return;\n\n   cartItem.quantity=quantity\n   cartItem.price=quantity*cartItem.food.price\n    \n\n   this.setCartToLocalStorage();\n  }\n\n  clearCart(){\n\n    this.cart=new Cart();\n    this.setCartToLocalStorage();\n    \n  }\n\n  getCartObservable():Observable<Cart>{\n    return this.cartSubject.asObservable();\n  }\n\n  setCartToLocalStorage():void\n{\n  // reduce just reducr the result into a single value and jsut use accumulator, current value and intial value so current vaue will be the value of array and accumulator just store the result so here its like total=total+price for all price in cartItem entries\nthis.cart.totalPrice=this.cart.items.reduce((prev,currentItem)=>prev+currentItem.price,0)\nthis.cart.totalCount=this.cart.items.reduce((prev,currentItem)=>prev+currentItem.quantity,0)\nthis.cart.items.reduce((prev,currentItem)=>prev+currentItem.quantity,0)\nthis.cart.items.reduce((prev,currentItem)=>prev+currentItem.quantity,0)\nconst cartJson=JSON.stringify(this.cart)\nlocalStorage.setItem('Cart',cartJson)\nthis.cartSubject.next(this.cart)\n\n\n}\n\ngetCartFromLocalStorage(){\n\n const cart= localStorage.getItem('Cart')\n\n // this below will avoid disapperaing of cart when page refreshed as we are using local storage to get the cart and if cart empty then its returninga fresh cart object\n return cart?JSON.parse(cart):new Cart();\n\n\n}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}