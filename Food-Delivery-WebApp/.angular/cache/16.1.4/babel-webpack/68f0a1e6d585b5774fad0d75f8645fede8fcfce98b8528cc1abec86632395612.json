{"ast":null,"code":"import { Cart } from '../shared/models/Cart';\nimport { CartItem } from '../shared/models/CartItem';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cart = new Cart();\n    this.cartSubject = new BehaviorSubject(this.cart);\n  }\n  addToCart(food) {\n    let cartItem = this.cart.items.find(item => item.food.id === food.id);\n    if (cartItem) return;\n    this.cart.items.push(new CartItem(food));\n    this.setCartToLocalStorage();\n  }\n  removeFromCart(foodId) {\n    this.cart.items = this.cart.items.filter(item => item.food.id != foodId);\n    this.setCartToLocalStorage();\n  }\n  changeQuantity(foodId, quantity) {\n    let cartItem = this.cart.items.find(item => item.food.id === foodId);\n    if (!cartItem) return;\n    cartItem.quantity = quantity;\n    cartItem.price = quantity * cartItem.food.price;\n    this.setCartToLocalStorage();\n  }\n  clearCart() {\n    this.cart = new Cart();\n  }\n  getCartObservable() {\n    return this.cartSubject.asObservable();\n  }\n  setCartToLocalStorage() {\n    // reduce just reducr the result into a single value and jsut use accumulator, current value and intial value so current vaue will be the value of array and accumulator just store the result so here its like total=total+price for all price in cartItem entries\n    this.cart.totalPrice = this.cart.items.reduce((prev, currentItem) => prev + currentItem.price, 0);\n    this.cart.totalCount = this.cart.items.reduce((prev, currentItem) => prev + currentItem.quantity, 0);\n    this.cart.items.reduce((prev, currentItem) => prev + currentItem.quantity, 0);\n    this.cart.items.reduce((prev, currentItem) => prev + currentItem.quantity, 0);\n    const cartJson = JSON.stringify(this.cart);\n    localStorage.setItem('Cart', cartJson);\n    this.cartSubject.next(this.cart);\n  }\n  getCartFromLocalStorage() {\n    const cart = localStorage.getItem('Cart');\n    return cart ? JSON.parse(cart) : new Cart();\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Cart","CartItem","BehaviorSubject","CartService","constructor","cart","cartSubject","addToCart","food","cartItem","items","find","item","id","push","setCartToLocalStorage","removeFromCart","foodId","filter","changeQuantity","quantity","price","clearCart","getCartObservable","asObservable","totalPrice","reduce","prev","currentItem","totalCount","cartJson","JSON","stringify","localStorage","setItem","next","getCartFromLocalStorage","getItem","parse","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\Angular Projects\\Food-Delivery-WebApp\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cart } from '../shared/models/Cart';\nimport { Food } from '../shared/models/Food';\nimport { CartItem } from '../shared/models/CartItem';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  cart:Cart=new Cart();\n  cartSubject:BehaviorSubject<Cart>=new BehaviorSubject(this.cart);\n  constructor() { }\n\n\n  addToCart(food:Food){\n\n\n    let cartItem=this.cart.items.find(item=>item.food.id===food.id)\n   if(cartItem)\n   return;\n\n   this.cart.items.push(new CartItem(food))\n   this.setCartToLocalStorage();\n    \n  }\n\n\n  removeFromCart(foodId:string){\n\n    this.cart.items=this.cart.items.filter(item=>item.food.id!=foodId)\nthis.setCartToLocalStorage();\n  }\n\n  changeQuantity(foodId:String,quantity:number){\n   let cartItem=  this.cart.items.find(item=>item.food.id===foodId);\n   if(!cartItem)\n     return;\n\n   cartItem.quantity=quantity\n   cartItem.price=quantity*cartItem.food.price\n    \n\n   this.setCartToLocalStorage();\n  }\n\n  clearCart(){\n\n    this.cart=new Cart();\n    \n  }\n\n  getCartObservable():Observable<Cart>{\n    return this.cartSubject.asObservable();\n  }\n\n  setCartToLocalStorage():void\n{\n  // reduce just reducr the result into a single value and jsut use accumulator, current value and intial value so current vaue will be the value of array and accumulator just store the result so here its like total=total+price for all price in cartItem entries\nthis.cart.totalPrice=this.cart.items.reduce((prev,currentItem)=>prev+currentItem.price,0)\nthis.cart.totalCount=this.cart.items.reduce((prev,currentItem)=>prev+currentItem.quantity,0)\nthis.cart.items.reduce((prev,currentItem)=>prev+currentItem.quantity,0)\nthis.cart.items.reduce((prev,currentItem)=>prev+currentItem.quantity,0)\nconst cartJson=JSON.stringify(this.cart)\nlocalStorage.setItem('Cart',cartJson)\nthis.cartSubject.next(this.cart)\n\n\n}\n\ngetCartFromLocalStorage(){\n\n const cart= localStorage.getItem('Cart')\n return cart?JSON.parse(cart):new Cart();\n\n\n}\n\n}\n"],"mappings":"AACA,SAASA,IAAI,QAAQ,uBAAuB;AAE5C,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,SAASC,eAAe,QAAoB,MAAM;;AAKlD,OAAM,MAAOC,WAAW;EAItBC,YAAA;IAFA,KAAAC,IAAI,GAAM,IAAIL,IAAI,EAAE;IACpB,KAAAM,WAAW,GAAuB,IAAIJ,eAAe,CAAC,IAAI,CAACG,IAAI,CAAC;EAChD;EAGhBE,SAASA,CAACC,IAAS;IAGjB,IAAIC,QAAQ,GAAC,IAAI,CAACJ,IAAI,CAACK,KAAK,CAACC,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACJ,IAAI,CAACK,EAAE,KAAGL,IAAI,CAACK,EAAE,CAAC;IAChE,IAAGJ,QAAQ,EACX;IAEA,IAAI,CAACJ,IAAI,CAACK,KAAK,CAACI,IAAI,CAAC,IAAIb,QAAQ,CAACO,IAAI,CAAC,CAAC;IACxC,IAAI,CAACO,qBAAqB,EAAE;EAE7B;EAGAC,cAAcA,CAACC,MAAa;IAE1B,IAAI,CAACZ,IAAI,CAACK,KAAK,GAAC,IAAI,CAACL,IAAI,CAACK,KAAK,CAACQ,MAAM,CAACN,IAAI,IAAEA,IAAI,CAACJ,IAAI,CAACK,EAAE,IAAEI,MAAM,CAAC;IACtE,IAAI,CAACF,qBAAqB,EAAE;EAC1B;EAEAI,cAAcA,CAACF,MAAa,EAACG,QAAe;IAC3C,IAAIX,QAAQ,GAAG,IAAI,CAACJ,IAAI,CAACK,KAAK,CAACC,IAAI,CAACC,IAAI,IAAEA,IAAI,CAACJ,IAAI,CAACK,EAAE,KAAGI,MAAM,CAAC;IAChE,IAAG,CAACR,QAAQ,EACV;IAEFA,QAAQ,CAACW,QAAQ,GAACA,QAAQ;IAC1BX,QAAQ,CAACY,KAAK,GAACD,QAAQ,GAACX,QAAQ,CAACD,IAAI,CAACa,KAAK;IAG3C,IAAI,CAACN,qBAAqB,EAAE;EAC7B;EAEAO,SAASA,CAAA;IAEP,IAAI,CAACjB,IAAI,GAAC,IAAIL,IAAI,EAAE;EAEtB;EAEAuB,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACjB,WAAW,CAACkB,YAAY,EAAE;EACxC;EAEAT,qBAAqBA,CAAA;IAErB;IACF,IAAI,CAACV,IAAI,CAACoB,UAAU,GAAC,IAAI,CAACpB,IAAI,CAACK,KAAK,CAACgB,MAAM,CAAC,CAACC,IAAI,EAACC,WAAW,KAAGD,IAAI,GAACC,WAAW,CAACP,KAAK,EAAC,CAAC,CAAC;IACzF,IAAI,CAAChB,IAAI,CAACwB,UAAU,GAAC,IAAI,CAACxB,IAAI,CAACK,KAAK,CAACgB,MAAM,CAAC,CAACC,IAAI,EAACC,WAAW,KAAGD,IAAI,GAACC,WAAW,CAACR,QAAQ,EAAC,CAAC,CAAC;IAC5F,IAAI,CAACf,IAAI,CAACK,KAAK,CAACgB,MAAM,CAAC,CAACC,IAAI,EAACC,WAAW,KAAGD,IAAI,GAACC,WAAW,CAACR,QAAQ,EAAC,CAAC,CAAC;IACvE,IAAI,CAACf,IAAI,CAACK,KAAK,CAACgB,MAAM,CAAC,CAACC,IAAI,EAACC,WAAW,KAAGD,IAAI,GAACC,WAAW,CAACR,QAAQ,EAAC,CAAC,CAAC;IACvE,MAAMU,QAAQ,GAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC3B,IAAI,CAAC;IACxC4B,YAAY,CAACC,OAAO,CAAC,MAAM,EAACJ,QAAQ,CAAC;IACrC,IAAI,CAACxB,WAAW,CAAC6B,IAAI,CAAC,IAAI,CAAC9B,IAAI,CAAC;EAGhC;EAEA+B,uBAAuBA,CAAA;IAEtB,MAAM/B,IAAI,GAAE4B,YAAY,CAACI,OAAO,CAAC,MAAM,CAAC;IACxC,OAAOhC,IAAI,GAAC0B,IAAI,CAACO,KAAK,CAACjC,IAAI,CAAC,GAAC,IAAIL,IAAI,EAAE;EAGxC;;AApEaG,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAoC,OAAA,EAAXpC,WAAW,CAAAqC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}