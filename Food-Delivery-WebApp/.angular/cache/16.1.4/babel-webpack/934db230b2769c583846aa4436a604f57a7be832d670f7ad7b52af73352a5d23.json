{"ast":null,"code":"import { interval, map, take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class OrderService {\n  constructor(http) {\n    this.http = http;\n    this.orderUrl = 'http://localhost:5000/api/orders';\n    this.orderStatuses = ['Ordered', 'Cooking', 'Packed', 'Out for Delivery', 'Delivered'];\n  }\n  createOrder(order) {\n    return this.http.post(`${this.orderUrl}/create`, order);\n  }\n  getOrderStatusUpdates() {\n    return interval(5000).pipe(map(index => this.orderStatuses.slice(0, index + 1)), take(this.orderStatuses.length));\n  }\n  getOrderForCurrentUser() {\n    return this.http.get(`${this.orderUrl}/newOrderForUser`);\n  }\n  pay(order) {\n    return this.http.post(`${this.orderUrl}/pay`, order);\n  }\n  trackOrderById(id) {\n    return this.http.get(`${this.orderUrl}/track/` + id);\n  }\n}\nOrderService.ɵfac = function OrderService_Factory(t) {\n  return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient));\n};\nOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderService,\n  factory: OrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["interval","map","take","OrderService","constructor","http","orderUrl","orderStatuses","createOrder","order","post","getOrderStatusUpdates","pipe","index","slice","length","getOrderForCurrentUser","get","pay","trackOrderById","id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Projects\\Angular Projects\\OnlineFoodDelivery_WebApplication\\Food-Delivery-WebApp\\src\\app\\services\\order.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Order } from '../shared/models/Order';\nimport { Observable, interval, map, take } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n\n  orderUrl='http://localhost:5000/api/orders'\n\n  private orderStatuses:string[]= [\n    'Ordered',\n    'Cooking',\n    'Packed',\n    'Out for Delivery',\n    'Delivered',\n  ];\n\n  constructor(private http:HttpClient) {\n\n\n\n\n   }\n\n\n\n   createOrder(order:Order){\n   return this.http.post<Order>(`${this.orderUrl}/create`,order)\n   }\n\n   getOrderStatusUpdates(): Observable<string[]> {\n    return interval(5000).pipe(\n      map(index => this.orderStatuses.slice(0, index + 1)),\n      take(this.orderStatuses.length)\n    );\n  }\n\n\n   getOrderForCurrentUser(){\n   return this.http.get<Order>(`${this.orderUrl}/newOrderForUser`)\n   }\n\n\n\n   pay(order:Order):Observable<string>{\n    return this.http.post<string>(`${this.orderUrl}/pay`,order);\n  }\n\n  trackOrderById(id:number): Observable<Order>{\n    return this.http.get<Order>( `${this.orderUrl}/track/`+id);\n  }\n}\n"],"mappings":"AAGA,SAAqBA,QAAQ,EAAEC,GAAG,EAAEC,IAAI,QAAQ,MAAM;;;AAKtD,OAAM,MAAOC,YAAY;EAYvBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IAVxB,KAAAC,QAAQ,GAAC,kCAAkC;IAEnC,KAAAC,aAAa,GAAW,CAC9B,SAAS,EACT,SAAS,EACT,QAAQ,EACR,kBAAkB,EAClB,WAAW,CACZ;EAOA;EAIAC,WAAWA,CAACC,KAAW;IACvB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAQ,GAAG,IAAI,CAACJ,QAAQ,SAAS,EAACG,KAAK,CAAC;EAC7D;EAEAE,qBAAqBA,CAAA;IACpB,OAAOX,QAAQ,CAAC,IAAI,CAAC,CAACY,IAAI,CACxBX,GAAG,CAACY,KAAK,IAAI,IAAI,CAACN,aAAa,CAACO,KAAK,CAAC,CAAC,EAAED,KAAK,GAAG,CAAC,CAAC,CAAC,EACpDX,IAAI,CAAC,IAAI,CAACK,aAAa,CAACQ,MAAM,CAAC,CAChC;EACH;EAGCC,sBAAsBA,CAAA;IACtB,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAQ,GAAG,IAAI,CAACX,QAAQ,kBAAkB,CAAC;EAC/D;EAIAY,GAAGA,CAACT,KAAW;IACd,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAS,GAAG,IAAI,CAACJ,QAAQ,MAAM,EAACG,KAAK,CAAC;EAC7D;EAEAU,cAAcA,CAACC,EAAS;IACtB,OAAO,IAAI,CAACf,IAAI,CAACY,GAAG,CAAS,GAAG,IAAI,CAACX,QAAQ,SAAS,GAACc,EAAE,CAAC;EAC5D;;AA7CWjB,YAAY,C;mBAAZA,YAAY,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZrB,YAAY,C;SAAZA,YAAY;EAAAsB,OAAA,EAAZtB,YAAY,CAAAuB,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}