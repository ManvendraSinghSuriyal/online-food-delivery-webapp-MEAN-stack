/* eslint-disable @angular-eslint/component-class-suffix */
import { Component, Input } from '@angular/core';
import { StarRatingUtils } from './star-rating.utils';
import * as i0 from "@angular/core";
import * as i1 from "./star-rating-config.service";
export class StarRating {
    constructor(config) {
        this.config = config;
        //set default ctrl props
        this.classEmpty = this.config.classEmpty;
        this.classHalf = this.config.classHalf;
        this.classFilled = this.config.classFilled;
        this.pathEmpty = this.config.svgPathEmpty;
        this.pathHalf = this.config.svgPathHalf;
        this.pathFilled = this.config.svgPathFilled;
        //set default Component Inputs
        if ('getColor' in this.config &&
            typeof this.config.getColor === 'function') {
            this.getColor = this.config.getColor;
        }
        if ('getHalfStarVisible' in this.config &&
            typeof this.config.getHalfStarVisible === 'function') {
            this.getHalfStarVisible = this.config.getHalfStarVisible;
        }
        this.numOfStars = this.config.numOfStars;
        this.rating = 0;
        this.step = 1;
    }
    get showHalfStars() {
        return this._showHalfStars;
    }
    set showHalfStars(value) {
        this._showHalfStars = !!value;
        //update halfStarVisible
        this.setHalfStarVisible();
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || '';
    }
    get focus() {
        return this._focus;
    }
    set focus(value) {
        this._focus = !!value;
    }
    get labelText() {
        return this._labelText;
    }
    set labelText(value) {
        this._labelText = value;
    }
    get labelPosition() {
        return this._labelPosition;
    }
    set labelPosition(value) {
        this._labelPosition = value || this.config.labelPosition;
    }
    get labelVisible() {
        return this._labelVisible;
    }
    set labelVisible(value) {
        this._labelVisible = !!value;
    }
    get hoverEnabled() {
        return this._hoverEnabled;
    }
    set hoverEnabled(value) {
        this._hoverEnabled = value !== undefined ? !!value : false;
    }
    get staticColor() {
        return this._staticColor || this.config.staticColor || undefined;
    }
    set staticColor(value) {
        this._staticColor = value;
        //update color.
        this.setColor();
    }
    get direction() {
        return this._direction;
    }
    set direction(value) {
        this._direction = value || undefined;
    }
    get numOfStars() {
        return this._numOfStars;
    }
    set numOfStars(value) {
        this._numOfStars = value > 0 ? value : this.config.numOfStars;
        //update stars array
        this.stars = StarRatingUtils.getStarsArray(this.numOfStars);
        //update color
        this.setColor();
    }
    get hoverRating() {
        return this._hoverRating;
    }
    set hoverRating(value) {
        this._hoverRating = value > 0 ? value : 0;
    }
    get speed() {
        return this._speed;
    }
    set speed(value) {
        this._speed = value || this.config.speed;
    }
    get size() {
        return this._size || this.config.size;
    }
    set size(value) {
        this._size = value;
    }
    get starType() {
        return this._starType || this.config.starType;
    }
    set starType(value) {
        this._starType = value;
    }
    get space() {
        return this._space;
    }
    set space(value) {
        this._space = value;
    }
    get readOnly() {
        return this._readOnly;
    }
    set readOnly(value) {
        this._readOnly = !!value;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    get step() {
        return this._step;
    }
    set step(value) {
        this._step = value > 0 ? value : 1;
    }
    get rating() {
        return this._rating;
    }
    set rating(value) {
        this.setRating(value);
    }
    /**
     * setRating
     * I use a setter function instead of a set method to enable overrides for this function.
     * @param value
     */
    setRating(value) {
        //validate and apply newRating
        let newRating = 0;
        if (value >= 0 && value <= this.numOfStars) {
            newRating = value;
        }
        //limit max value to max number of stars
        if (value > this.numOfStars) {
            newRating = this.numOfStars;
        }
        this._rating = newRating;
        //update ratingAsInteger. rating parsed to int for the value-[n] modifier
        this.ratingAsInteger = parseInt(this._rating?.toString(), 10);
        //update halfStarsVisible
        this.setHalfStarVisible();
        //update calculated Color
        this.setColor();
    }
    svgVisible() {
        return this.starType === 'svg';
    }
    interactionPossible() {
        return !this.readOnly && !this.disabled;
    }
    setColor(useHoverValue = false) {
        //check if custom function is given
        const ratingValue = useHoverValue ? this.hoverRating : this.rating;
        if (typeof this.getColor === 'function') {
            this.color = this.getColor(ratingValue, this.numOfStars, this.staticColor);
        }
        else {
            this.color = StarRatingUtils.getColor(ratingValue, this.numOfStars, this.staticColor);
        }
    }
    setHalfStarVisible() {
        //update halfStarVisible
        if (this.showHalfStars) {
            //check if custom function is given
            if (typeof this.getHalfStarVisible === 'function') {
                this.halfStarVisible = this.getHalfStarVisible(this.rating);
            }
            else {
                this.halfStarVisible = StarRatingUtils.getHalfStarVisible(this.rating);
            }
        }
        else {
            this.halfStarVisible = false;
        }
    }
    getComponentClassNames() {
        const classNames = [];
        classNames.push(this.rating ? 'value-' + this.ratingAsInteger : 'value-0');
        classNames.push(this.halfStarVisible ? 'half' : '');
        classNames.push(this.hoverEnabled ? 'hover' : '');
        const hoverRating = this.hoverRating
            ? 'hover-' + this.hoverRating
            : 'hover-0';
        classNames.push(this.hoverEnabled ? hoverRating : '');
        classNames.push(this.space ? 'space-' + this.space : '');
        classNames.push(this.labelPosition ? 'label-' + this.labelPosition : '');
        classNames.push(this.color ? 'color-' + this.color : '');
        classNames.push(this.starType ? 'star-' + this.starType : '');
        classNames.push(this.speed);
        classNames.push(this.size);
        classNames.push(this.readOnly ? 'read-only' : '');
        classNames.push(this.disabled ? 'disabled' : '');
        classNames.push(this.direction ? 'direction-' + this.direction : '');
        return classNames.join(' ');
    }
    increment() {
        //increment to next higher step
        const absDiff = Math.abs(this.rating % this.step);
        this.rating = this.rating + (absDiff > 0 ? this.step - absDiff : this.step);
    }
    decrement() {
        //decrement to next lower step
        const absDiff = Math.abs(this.rating % this.step);
        this.rating = this.rating - (absDiff > 0 ? absDiff : this.step);
    }
    reset() {
        this.rating = 0;
    }
}
StarRating.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: StarRating, deps: [{ token: i1.StarRatingConfigService }], target: i0.ɵɵFactoryTarget.Component });
StarRating.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.0", type: StarRating, selector: "placeholder-star-rating", inputs: { showHalfStars: "showHalfStars", id: "id", focus: "focus", labelText: "labelText", labelPosition: "labelPosition", labelVisible: "labelVisible", hoverEnabled: "hoverEnabled", staticColor: "staticColor", direction: "direction", numOfStars: "numOfStars", hoverRating: "hoverRating", speed: "speed", size: "size", starType: "starType", space: "space", readOnly: "readOnly", disabled: "disabled", step: "step", rating: "rating" }, ngImport: i0, template: ``, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: StarRating, decorators: [{
            type: Component,
            args: [{
                    // Metadata needed for Angular.
                    template: ``,
                    selector: 'placeholder-star-rating'
                }]
        }], ctorParameters: function () { return [{ type: i1.StarRatingConfigService }]; }, propDecorators: { showHalfStars: [{
                type: Input
            }], id: [{
                type: Input
            }], focus: [{
                type: Input
            }], labelText: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], labelVisible: [{
                type: Input
            }], hoverEnabled: [{
                type: Input
            }], staticColor: [{
                type: Input
            }], direction: [{
                type: Input
            }], numOfStars: [{
                type: Input
            }], hoverRating: [{
                type: Input
            }], speed: [{
                type: Input
            }], size: [{
                type: Input
            }], starType: [{
                type: Input
            }], space: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], disabled: [{
                type: Input
            }], step: [{
                type: Input
            }], rating: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,