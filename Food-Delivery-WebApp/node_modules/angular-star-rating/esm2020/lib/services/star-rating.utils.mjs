export class StarRatingUtils {
    //Static methods
    ///////////////////////////////////////////////////////////////////////////////////////////
    /*
     * getStarsArray
     *
     * returns an array of increasing numbers starting at 1
     *
     * @param numOfStars
     * @returns {Array}
     */
    static getStarsArray(numOfStars) {
        const stars = [];
        for (let i = 0; i < numOfStars; i++) {
            stars.push(i + 1);
        }
        return stars;
    }
    /*
     * getHalfStarVisible
     *
     * Returns true if there should be a half star visible, and false if not.
     *
     * @param rating
     * @returns {boolean}
     */
    static getHalfStarVisible(rating) {
        return Math.abs(rating % 1) > 0;
    }
    /*
     * getColor
     *
     * The default function for color calculation
     * based on the current rating and the the number of stars possible.
     * If a staticColor is set the function will use it as return value.
     *
     * @param rating
     * @param numOfStars
     * @param staticColor
     * @returns {starRatingColor}
     */
    static getColor(rating, numOfStars, staticColor) {
        rating = rating || 0;
        //if a fix color is set use this one
        if (staticColor) {
            return staticColor;
        }
        //calculate size of smallest fraction
        const fractionSize = numOfStars / 3;
        //apply color by fraction
        let color = 'default';
        if (rating > 0) {
            color = 'negative';
        }
        if (rating > fractionSize) {
            color = 'ok';
        }
        if (rating > fractionSize * 2) {
            color = 'positive';
        }
        return color;
    }
    /*
     * isDigitKeyEventCode
     * detects digit key event sodes
     * @param eventCode
     * @returns {boolean}
     */
    static isDigitKeyEventCode(eventCode) {
        return eventCode.indexOf('Digit') === 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhci1yYXRpbmcudXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItc3Rhci1yYXRpbmcvc3JjL2xpYi9zZXJ2aWNlcy9zdGFyLXJhdGluZy51dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxNQUFNLE9BQU8sZUFBZTtJQUMxQixnQkFBZ0I7SUFDaEIsMkZBQTJGO0lBRTNGOzs7Ozs7O09BT0c7SUFDSCxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQWtCO1FBQ3JDLE1BQU0sS0FBSyxHQUFrQixFQUFFLENBQUM7UUFDaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNuQjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxNQUFNLENBQUMsa0JBQWtCLENBQUMsTUFBYztRQUN0QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7O09BV0c7SUFDSCxNQUFNLENBQUMsUUFBUSxDQUNiLE1BQWMsRUFDZCxVQUFrQixFQUNsQixXQUE2QjtRQUU3QixNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUVyQixvQ0FBb0M7UUFDcEMsSUFBSSxXQUFXLEVBQUU7WUFDZixPQUFPLFdBQVcsQ0FBQztTQUNwQjtRQUVELHFDQUFxQztRQUNyQyxNQUFNLFlBQVksR0FBRyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBRXBDLHlCQUF5QjtRQUN6QixJQUFJLEtBQUssR0FBb0IsU0FBUyxDQUFDO1FBQ3ZDLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNkLEtBQUssR0FBRyxVQUFVLENBQUM7U0FDcEI7UUFDRCxJQUFJLE1BQU0sR0FBRyxZQUFZLEVBQUU7WUFDekIsS0FBSyxHQUFHLElBQUksQ0FBQztTQUNkO1FBQ0QsSUFBSSxNQUFNLEdBQUcsWUFBWSxHQUFHLENBQUMsRUFBRTtZQUM3QixLQUFLLEdBQUcsVUFBVSxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsbUJBQW1CLENBQUMsU0FBaUI7UUFDMUMsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdGFyUmF0aW5nQ29sb3IgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3N0YXItcmF0aW5nLWNvbmZpZy5pbnRlcmZhY2UnO1xuZXhwb3J0IGNsYXNzIFN0YXJSYXRpbmdVdGlscyB7XG4gIC8vU3RhdGljIG1ldGhvZHNcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8qXG4gICAqIGdldFN0YXJzQXJyYXlcbiAgICpcbiAgICogcmV0dXJucyBhbiBhcnJheSBvZiBpbmNyZWFzaW5nIG51bWJlcnMgc3RhcnRpbmcgYXQgMVxuICAgKlxuICAgKiBAcGFyYW0gbnVtT2ZTdGFyc1xuICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAqL1xuICBzdGF0aWMgZ2V0U3RhcnNBcnJheShudW1PZlN0YXJzOiBudW1iZXIpOiBBcnJheTxudW1iZXI+IHtcbiAgICBjb25zdCBzdGFyczogQXJyYXk8bnVtYmVyPiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZTdGFyczsgaSsrKSB7XG4gICAgICBzdGFycy5wdXNoKGkgKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJzO1xuICB9XG5cbiAgLypcbiAgICogZ2V0SGFsZlN0YXJWaXNpYmxlXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBzaG91bGQgYmUgYSBoYWxmIHN0YXIgdmlzaWJsZSwgYW5kIGZhbHNlIGlmIG5vdC5cbiAgICpcbiAgICogQHBhcmFtIHJhdGluZ1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBnZXRIYWxmU3RhclZpc2libGUocmF0aW5nOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gTWF0aC5hYnMocmF0aW5nICUgMSkgPiAwO1xuICB9XG5cbiAgLypcbiAgICogZ2V0Q29sb3JcbiAgICpcbiAgICogVGhlIGRlZmF1bHQgZnVuY3Rpb24gZm9yIGNvbG9yIGNhbGN1bGF0aW9uXG4gICAqIGJhc2VkIG9uIHRoZSBjdXJyZW50IHJhdGluZyBhbmQgdGhlIHRoZSBudW1iZXIgb2Ygc3RhcnMgcG9zc2libGUuXG4gICAqIElmIGEgc3RhdGljQ29sb3IgaXMgc2V0IHRoZSBmdW5jdGlvbiB3aWxsIHVzZSBpdCBhcyByZXR1cm4gdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSByYXRpbmdcbiAgICogQHBhcmFtIG51bU9mU3RhcnNcbiAgICogQHBhcmFtIHN0YXRpY0NvbG9yXG4gICAqIEByZXR1cm5zIHtzdGFyUmF0aW5nQ29sb3J9XG4gICAqL1xuICBzdGF0aWMgZ2V0Q29sb3IoXG4gICAgcmF0aW5nOiBudW1iZXIsXG4gICAgbnVtT2ZTdGFyczogbnVtYmVyLFxuICAgIHN0YXRpY0NvbG9yPzogc3RhclJhdGluZ0NvbG9yXG4gICk6IHN0YXJSYXRpbmdDb2xvciB7XG4gICAgcmF0aW5nID0gcmF0aW5nIHx8IDA7XG5cbiAgICAvL2lmIGEgZml4IGNvbG9yIGlzIHNldCB1c2UgdGhpcyBvbmVcbiAgICBpZiAoc3RhdGljQ29sb3IpIHtcbiAgICAgIHJldHVybiBzdGF0aWNDb2xvcjtcbiAgICB9XG5cbiAgICAvL2NhbGN1bGF0ZSBzaXplIG9mIHNtYWxsZXN0IGZyYWN0aW9uXG4gICAgY29uc3QgZnJhY3Rpb25TaXplID0gbnVtT2ZTdGFycyAvIDM7XG5cbiAgICAvL2FwcGx5IGNvbG9yIGJ5IGZyYWN0aW9uXG4gICAgbGV0IGNvbG9yOiBzdGFyUmF0aW5nQ29sb3IgPSAnZGVmYXVsdCc7XG4gICAgaWYgKHJhdGluZyA+IDApIHtcbiAgICAgIGNvbG9yID0gJ25lZ2F0aXZlJztcbiAgICB9XG4gICAgaWYgKHJhdGluZyA+IGZyYWN0aW9uU2l6ZSkge1xuICAgICAgY29sb3IgPSAnb2snO1xuICAgIH1cbiAgICBpZiAocmF0aW5nID4gZnJhY3Rpb25TaXplICogMikge1xuICAgICAgY29sb3IgPSAncG9zaXRpdmUnO1xuICAgIH1cblxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIC8qXG4gICAqIGlzRGlnaXRLZXlFdmVudENvZGVcbiAgICogZGV0ZWN0cyBkaWdpdCBrZXkgZXZlbnQgc29kZXNcbiAgICogQHBhcmFtIGV2ZW50Q29kZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0RpZ2l0S2V5RXZlbnRDb2RlKGV2ZW50Q29kZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGV2ZW50Q29kZS5pbmRleE9mKCdEaWdpdCcpID09PSAwO1xuICB9XG59XG4iXX0=