/**
 * Configuration service for the StarRating component.
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the star ratings used in the application.
 */
export class StarRatingConfigService {
    constructor() {
        this._classEmpty = 'default-star-empty-icon';
        this._classHalf = 'default-star-half-icon';
        this._classFilled = 'default-star-filled-icon';
        this._numOfStars = 5;
        this._size = 'medium';
        this._labelPosition = 'left';
        this._speed = 'noticeable';
        this._starType = 'svg';
        this._assetsPath = 'assets/images/';
        this._svgPath = this.assetsPath + 'star-rating.icons.svg';
        this._svgEmptySymbolId = 'star-empty';
        this._svgHalfSymbolId = 'star-half';
        this._svgFilledSymbolId = 'star-filled';
        this._svgPathEmpty = this.svgPath + '#' + this.svgEmptySymbolId;
        this._svgPathHalf = this.svgPath + '#' + this.svgHalfSymbolId;
        this._svgPathFilled = this.svgPath + '#' + this.svgFilledSymbolId;
    }
    get classEmpty() {
        return this._classEmpty;
    }
    set classEmpty(classEmpty) {
        this._classEmpty = classEmpty;
    }
    get classHalf() {
        return this._classHalf;
    }
    set classHalf(classHalf) {
        this._classHalf = classHalf;
    }
    get classFilled() {
        return this._classFilled;
    }
    set classFilled(classFilled) {
        this._classFilled = classFilled;
    }
    get numOfStars() {
        return this._numOfStars;
    }
    set numOfStars(numOfStars) {
        this._numOfStars = numOfStars;
    }
    get size() {
        return this._size;
    }
    set size(size) {
        this._size = size;
    }
    get staticColor() {
        return this._staticColor;
    }
    set staticColor(value) {
        this._staticColor = value;
    }
    get labelPosition() {
        return this._labelPosition;
    }
    set labelPosition(labelPosition) {
        this._labelPosition = labelPosition;
    }
    get speed() {
        return this._speed;
    }
    set speed(speed) {
        this._speed = speed;
    }
    get starType() {
        return this._starType;
    }
    set starType(starType) {
        this._starType = starType;
    }
    get assetsPath() {
        return this._assetsPath;
    }
    set assetsPath(assetsPath) {
        this._assetsPath = assetsPath;
    }
    get svgPath() {
        return this._svgPath;
    }
    set svgPath(svgPath) {
        this._svgPath = svgPath;
    }
    get svgEmptySymbolId() {
        return this._svgEmptySymbolId;
    }
    set svgEmptySymbolId(svgEmptySymbolId) {
        this._svgEmptySymbolId = svgEmptySymbolId;
    }
    get svgHalfSymbolId() {
        return this._svgHalfSymbolId;
    }
    set svgHalfSymbolId(svgHalfSymbolId) {
        this._svgHalfSymbolId = svgHalfSymbolId;
    }
    get svgFilledSymbolId() {
        return this._svgFilledSymbolId;
    }
    set svgFilledSymbolId(svgFilledSymbolId) {
        this._svgFilledSymbolId = svgFilledSymbolId;
    }
    get svgPathEmpty() {
        return this._svgPathEmpty;
    }
    set svgPathEmpty(svgPathEmpty) {
        this._svgPathEmpty = svgPathEmpty;
    }
    get svgPathHalf() {
        return this._svgPathHalf;
    }
    set svgPathHalf(svgPathHalf) {
        this._svgPathHalf = svgPathHalf;
    }
    get svgPathFilled() {
        return this._svgPathFilled;
    }
    set svgPathFilled(svgPathFilled) {
        this._svgPathFilled = svgPathFilled;
    }
    getColor(rating, numOfStars, staticColor) {
        rating = rating || 0;
        // if a fix color is set use this one
        if (staticColor) {
            return staticColor;
        }
        // calculate size of smallest fraction
        const fractionSize = numOfStars / 3;
        // apply color by fraction
        let color = 'default';
        if (rating > 0) {
            color = 'negative';
        }
        if (rating > fractionSize) {
            color = 'ok';
        }
        if (rating > fractionSize * 2) {
            color = 'positive';
        }
        return color;
    }
    getHalfStarVisible(rating) {
        return Math.abs(rating % 1) > 0;
    }
}
//# sourceMappingURL=data:application/json;base64,