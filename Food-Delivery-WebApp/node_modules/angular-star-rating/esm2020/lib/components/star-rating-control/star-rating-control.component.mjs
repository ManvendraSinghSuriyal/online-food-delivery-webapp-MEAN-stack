/* eslint-disable @typescript-eslint/no-explicit-any */
import { Component, EventEmitter, forwardRef, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { StarRating } from '../../services/star-rating';
import { StarRatingUtils } from '../../services/star-rating.utils';
import * as i0 from "@angular/core";
import * as i1 from "../../services/star-rating-config.service";
import * as i2 from "@angular/common";
const STAR_RATING_CONTROL_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => StarRatingControlComponent),
    multi: true,
};
export class StarRatingControlComponent extends StarRating {
    constructor(config) {
        super(config);
        this.starClickChange = new EventEmitter();
        this.ratingChange = new EventEmitter();
        this.hoverRatingChange = new EventEmitter();
        this.onModelChangeRegistered = false;
        this.onTouchRegistered = false;
    }
    saveOnClick($event) {
        if (this.starClickChange) {
            this.starClickChange.emit($event);
        }
    }
    saveOnRatingChange($event) {
        if (this.ratingChange) {
            this.ratingChange.emit($event);
        }
    }
    saveOnHover($event) {
        if (this.hoverRatingChange) {
            this.hoverRatingChange.emit($event);
        }
    }
    saveOnTouch() {
        if (this.onTouchRegistered) {
            this.onTouch();
        }
    }
    saveOnModelChange(value) {
        if (this.onModelChangeRegistered) {
            this.onModelChange(value);
        }
    }
    /**ACCESSIBILITY **/
    //Keyboard events
    onKeyDown(event) {
        if (!this.interactionPossible()) {
            return;
        }
        const handlers = {
            //Decrement
            Minus: () => this.decrement(),
            ArrowDown: () => this.decrement(),
            ArrowLeft: () => this.decrement(),
            //Increment
            Plus: () => this.increment(),
            ArrowRight: () => this.increment(),
            ArrowUp: () => this.increment(),
            //Reset
            Backspace: () => this.reset(),
            Delete: () => this.reset(),
            Digit0: () => this.reset(),
        };
        const handleDigits = (eventCode) => {
            const dStr = 'Digit';
            const digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);
            this.rating = digit;
        };
        if (handlers[event['code']] ||
            StarRatingUtils.isDigitKeyEventCode(event['code'])) {
            if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {
                handleDigits(event['code']);
            }
            else {
                handlers[event['code']]();
            }
            event.preventDefault();
            event.stopPropagation();
        }
        this.saveOnTouch();
    }
    //Focus events
    onBlur(event) {
        this.focus = false;
        event.preventDefault();
        event.stopPropagation();
        this.saveOnTouch();
    }
    onFocus(event) {
        this.focus = true;
        event.preventDefault();
        event.stopPropagation();
        this.saveOnTouch();
    }
    //Hover events
    onStarHover(rating) {
        if (!this.interactionPossible() || !this.hoverEnabled) {
            return;
        }
        this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0;
        //fire onHoverRatingChange event
        const $event = { hoverRating: this.hoverRating };
        this.saveOnHover($event);
    }
    /**Form Control - ControlValueAccessor implementation**/
    writeValue(obj) {
        this.rating = obj;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
        this.onModelChangeRegistered = true;
    }
    registerOnTouched(fn) {
        this.onTouch = fn;
        this.onTouchRegistered = true;
    }
    //Overrides
    setRating(value) {
        const initValue = this.rating;
        super.setRating(value);
        //if value changed trigger valueAccessor events and outputs
        if (initValue !== this.rating) {
            const $event = { rating: this.rating };
            this.saveOnRatingChange($event);
            this.saveOnModelChange(this.rating);
        }
    }
    /**
     * onStarClicked
     *
     * Is fired when a star is clicked. And updated the rating value.
     * This function returns if the disabled or readOnly
     * property is set. If provided it emits the onClick event
     * handler with the actual rating value.
     *
     * @param rating
     */
    onStarClicked(rating) {
        //fire onClick event
        if (!this.interactionPossible()) {
            return;
        }
        this.rating = rating;
        const onClickEventObject = {
            rating: this.rating,
        };
        this.saveOnClick(onClickEventObject);
    }
}
StarRatingControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: StarRatingControlComponent, deps: [{ token: i1.StarRatingConfigService }], target: i0.ɵɵFactoryTarget.Component });
StarRatingControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.0", type: StarRatingControlComponent, selector: "star-rating-control", outputs: { starClickChange: "starClickChange", ratingChange: "ratingChange", hoverRatingChange: "hoverRatingChange" }, providers: [STAR_RATING_CONTROL_ACCESSOR], usesInheritance: true, ngImport: i0, template: "<div id=\"{{id}}\" class=\"rating {{getComponentClassNames()}}\" tabindex=\"0\"\n  (keydown)=\"onKeyDown($event)\" (blur)=\"onBlur($event)\"\n  (focus)=\"onFocus($event)\" (mouseleave)=\"onStarHover(0)\">\n  <div *ngIf=\"labelText\" class=\"label-value\">{{labelText}}</div>\n  <div class=\"star-container\">\n    <div class=\"star\" (mouseenter)=\"onStarHover(star)\"\n      *ngFor=\"let star of stars\" (click)=\"onStarClicked(star)\">\n      <i *ngIf=\"!svgVisible()\" class=\"star-empty {{classEmpty}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-half {{classHalf}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-filled {{classFilled}}\"></i>\n      <svg *ngIf=\"svgVisible()\" class=\"star-empty\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathEmpty\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-half\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathHalf\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-filled\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathFilled\"></use>\n      </svg>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: StarRatingControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'star-rating-control', providers: [STAR_RATING_CONTROL_ACCESSOR], template: "<div id=\"{{id}}\" class=\"rating {{getComponentClassNames()}}\" tabindex=\"0\"\n  (keydown)=\"onKeyDown($event)\" (blur)=\"onBlur($event)\"\n  (focus)=\"onFocus($event)\" (mouseleave)=\"onStarHover(0)\">\n  <div *ngIf=\"labelText\" class=\"label-value\">{{labelText}}</div>\n  <div class=\"star-container\">\n    <div class=\"star\" (mouseenter)=\"onStarHover(star)\"\n      *ngFor=\"let star of stars\" (click)=\"onStarClicked(star)\">\n      <i *ngIf=\"!svgVisible()\" class=\"star-empty {{classEmpty}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-half {{classHalf}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-filled {{classFilled}}\"></i>\n      <svg *ngIf=\"svgVisible()\" class=\"star-empty\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathEmpty\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-half\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathHalf\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-filled\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathFilled\"></use>\n      </svg>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.StarRatingConfigService }]; }, propDecorators: { starClickChange: [{
                type: Output
            }], ratingChange: [{
                type: Output
            }], hoverRatingChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhci1yYXRpbmctY29udHJvbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItc3Rhci1yYXRpbmcvc3JjL2xpYi9jb21wb25lbnRzL3N0YXItcmF0aW5nLWNvbnRyb2wvc3Rhci1yYXRpbmctY29udHJvbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItc3Rhci1yYXRpbmcvc3JjL2xpYi9jb21wb25lbnRzL3N0YXItcmF0aW5nLWNvbnRyb2wvc3Rhci1yYXRpbmctY29udHJvbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx1REFBdUQ7QUFDdkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RSxPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFLekUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXhELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7OztBQUVuRSxNQUFNLDRCQUE0QixHQUFHO0lBQ25DLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztJQUN6RCxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUM7QUFPRixNQUFNLE9BQU8sMEJBQ1gsU0FBUSxVQUFVO0lBK0lsQixZQUFZLE1BQStCO1FBQ3pDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQTVJaEIsb0JBQWUsR0FBNkIsSUFBSSxZQUFZLEVBQWMsQ0FBQztRQUczRSxpQkFBWSxHQUFvQyxJQUFJLFlBQVksRUFBcUIsQ0FBQztRQUd0RixzQkFBaUIsR0FBeUMsSUFBSSxZQUFZLEVBQTBCLENBQUM7UUFNN0YsNEJBQXVC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QVF6QyxlQUFlO3NCQURkLE1BQU07Z0JBSVAsWUFBWTtzQkFEWCxNQUFNO2dCQUlQLGlCQUFpQjtzQkFEaEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBmb3J3YXJkUmVmLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgQ2xpY2tFdmVudCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY2xpY2stZXZlbnQuaW50ZXJmYWNlJztcbmltcG9ydCB7IEhvdmVyUmF0aW5nQ2hhbmdlRXZlbnQgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2hvdmVyLXJhdGluZy1jaGFuZ2UtZXZlbnQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFJhdGluZ0NoYW5nZUV2ZW50IH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9yYXRpbmctY2hhbmdlLWV2ZW50LmludGVyZmFjZSc7XG5pbXBvcnQgeyBTdGFyUmF0aW5nIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvc3Rhci1yYXRpbmcnO1xuaW1wb3J0IHsgU3RhclJhdGluZ0NvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zdGFyLXJhdGluZy1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBTdGFyUmF0aW5nVXRpbHMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zdGFyLXJhdGluZy51dGlscyc7XG5cbmNvbnN0IFNUQVJfUkFUSU5HX0NPTlRST0xfQUNDRVNTT1IgPSB7XG4gIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBTdGFyUmF0aW5nQ29udHJvbENvbXBvbmVudCksXG4gIG11bHRpOiB0cnVlLFxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc3Rhci1yYXRpbmctY29udHJvbCcsXG4gIHByb3ZpZGVyczogW1NUQVJfUkFUSU5HX0NPTlRST0xfQUNDRVNTT1JdLFxuICB0ZW1wbGF0ZVVybDogJ3N0YXItcmF0aW5nLWNvbnRyb2wuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBTdGFyUmF0aW5nQ29udHJvbENvbXBvbmVudFxuICBleHRlbmRzIFN0YXJSYXRpbmdcbiAgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3Nvclxue1xuICBAT3V0cHV0KClcbiAgc3RhckNsaWNrQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Q2xpY2tFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPENsaWNrRXZlbnQ+KCk7XG5cbiAgQE91dHB1dCgpXG4gIHJhdGluZ0NoYW5nZTogRXZlbnRFbWl0dGVyPFJhdGluZ0NoYW5nZUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8UmF0aW5nQ2hhbmdlRXZlbnQ+KCk7XG5cbiAgQE91dHB1dCgpXG4gIGhvdmVyUmF0aW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8SG92ZXJSYXRpbmdDaGFuZ2VFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPEhvdmVyUmF0aW5nQ2hhbmdlRXZlbnQ+KCk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbiAgb25Ub3VjaDogRnVuY3Rpb247XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gIG9uTW9kZWxDaGFuZ2U6IEZ1bmN0aW9uO1xuICBwcml2YXRlIG9uTW9kZWxDaGFuZ2VSZWdpc3RlcmVkID0gZmFsc2U7XG4gIHByaXZhdGUgb25Ub3VjaFJlZ2lzdGVyZWQgPSBmYWxzZTtcblxuICBzYXZlT25DbGljaygkZXZlbnQ6IENsaWNrRXZlbnQpIHtcbiAgICBpZiAodGhpcy5zdGFyQ2xpY2tDaGFuZ2UpIHtcbiAgICAgIHRoaXMuc3RhckNsaWNrQ2hhbmdlLmVtaXQoJGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBzYXZlT25SYXRpbmdDaGFuZ2UoJGV2ZW50OiBSYXRpbmdDaGFuZ2VFdmVudCkge1xuICAgIGlmICh0aGlzLnJhdGluZ0NoYW5nZSkge1xuICAgICAgdGhpcy5yYXRpbmdDaGFuZ2UuZW1pdCgkZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHNhdmVPbkhvdmVyKCRldmVudDogSG92ZXJSYXRpbmdDaGFuZ2VFdmVudCkge1xuICAgIGlmICh0aGlzLmhvdmVyUmF0aW5nQ2hhbmdlKSB7XG4gICAgICB0aGlzLmhvdmVyUmF0aW5nQ2hhbmdlLmVtaXQoJGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBzYXZlT25Ub3VjaCgpIHtcbiAgICBpZiAodGhpcy5vblRvdWNoUmVnaXN0ZXJlZCkge1xuICAgICAgdGhpcy5vblRvdWNoKCk7XG4gICAgfVxuICB9XG5cbiAgc2F2ZU9uTW9kZWxDaGFuZ2UodmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0aGlzLm9uTW9kZWxDaGFuZ2VSZWdpc3RlcmVkKSB7XG4gICAgICB0aGlzLm9uTW9kZWxDaGFuZ2UodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKkFDQ0VTU0lCSUxJVFkgKiovXG5cbiAgLy9LZXlib2FyZCBldmVudHNcbiAgb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLmludGVyYWN0aW9uUG9zc2libGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZXJzOiBhbnkgPSB7XG4gICAgICAvL0RlY3JlbWVudFxuICAgICAgTWludXM6ICgpID0+IHRoaXMuZGVjcmVtZW50KCksXG4gICAgICBBcnJvd0Rvd246ICgpID0+IHRoaXMuZGVjcmVtZW50KCksXG4gICAgICBBcnJvd0xlZnQ6ICgpID0+IHRoaXMuZGVjcmVtZW50KCksXG5cbiAgICAgIC8vSW5jcmVtZW50XG4gICAgICBQbHVzOiAoKSA9PiB0aGlzLmluY3JlbWVudCgpLFxuICAgICAgQXJyb3dSaWdodDogKCkgPT4gdGhpcy5pbmNyZW1lbnQoKSxcbiAgICAgIEFycm93VXA6ICgpID0+IHRoaXMuaW5jcmVtZW50KCksXG5cbiAgICAgIC8vUmVzZXRcbiAgICAgIEJhY2tzcGFjZTogKCkgPT4gdGhpcy5yZXNldCgpLFxuICAgICAgRGVsZXRlOiAoKSA9PiB0aGlzLnJlc2V0KCksXG4gICAgICBEaWdpdDA6ICgpID0+IHRoaXMucmVzZXQoKSxcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlRGlnaXRzID0gKGV2ZW50Q29kZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBkU3RyID0gJ0RpZ2l0JztcbiAgICAgIGNvbnN0IGRpZ2l0OiBudW1iZXIgPSBwYXJzZUludChcbiAgICAgICAgZXZlbnRDb2RlLnN1YnN0cihkU3RyLmxlbmd0aCwgZXZlbnRDb2RlLmxlbmd0aCAtIDEpLFxuICAgICAgICAxMFxuICAgICAgKTtcbiAgICAgIHRoaXMucmF0aW5nID0gZGlnaXQ7XG4gICAgfTtcblxuICAgIGlmIChcbiAgICAgIGhhbmRsZXJzW2V2ZW50Wydjb2RlJ11dIHx8XG4gICAgICBTdGFyUmF0aW5nVXRpbHMuaXNEaWdpdEtleUV2ZW50Q29kZShldmVudFsnY29kZSddKVxuICAgICkge1xuICAgICAgaWYgKFN0YXJSYXRpbmdVdGlscy5pc0RpZ2l0S2V5RXZlbnRDb2RlKGV2ZW50Wydjb2RlJ10pKSB7XG4gICAgICAgIGhhbmRsZURpZ2l0cyhldmVudFsnY29kZSddKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZXJzW2V2ZW50Wydjb2RlJ11dKCk7XG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zYXZlT25Ub3VjaCgpO1xuICB9XG5cbiAgLy9Gb2N1cyBldmVudHNcbiAgb25CbHVyKGV2ZW50OiBGb2N1c0V2ZW50KSB7XG4gICAgdGhpcy5mb2N1cyA9IGZhbHNlO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5zYXZlT25Ub3VjaCgpO1xuICB9XG5cbiAgb25Gb2N1cyhldmVudDogRm9jdXNFdmVudCkge1xuICAgIHRoaXMuZm9jdXMgPSB0cnVlO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5zYXZlT25Ub3VjaCgpO1xuICB9XG5cbiAgLy9Ib3ZlciBldmVudHNcbiAgb25TdGFySG92ZXIocmF0aW5nPzogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmludGVyYWN0aW9uUG9zc2libGUoKSB8fCAhdGhpcy5ob3ZlckVuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmhvdmVyUmF0aW5nID0gcmF0aW5nID8gcGFyc2VJbnQocmF0aW5nLnRvU3RyaW5nKCksIDEwKSA6IDA7XG5cbiAgICAvL2ZpcmUgb25Ib3ZlclJhdGluZ0NoYW5nZSBldmVudFxuICAgIGNvbnN0ICRldmVudDogSG92ZXJSYXRpbmdDaGFuZ2VFdmVudCA9IHsgaG92ZXJSYXRpbmc6IHRoaXMuaG92ZXJSYXRpbmcgfTtcbiAgICB0aGlzLnNhdmVPbkhvdmVyKCRldmVudCk7XG4gIH1cblxuICAvKipGb3JtIENvbnRyb2wgLSBDb250cm9sVmFsdWVBY2Nlc3NvciBpbXBsZW1lbnRhdGlvbioqL1xuXG4gIHdyaXRlVmFsdWUob2JqOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnJhdGluZyA9IG9iajtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Nb2RlbENoYW5nZSA9IGZuO1xuICAgIHRoaXMub25Nb2RlbENoYW5nZVJlZ2lzdGVyZWQgPSB0cnVlO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25Ub3VjaCA9IGZuO1xuICAgIHRoaXMub25Ub3VjaFJlZ2lzdGVyZWQgPSB0cnVlO1xuICB9XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBTdGFyUmF0aW5nQ29uZmlnU2VydmljZSkge1xuICAgIHN1cGVyKGNvbmZpZyk7XG4gIH1cblxuICAvL092ZXJyaWRlc1xuICBzZXRSYXRpbmcodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGluaXRWYWx1ZSA9IHRoaXMucmF0aW5nO1xuICAgIHN1cGVyLnNldFJhdGluZyh2YWx1ZSk7XG5cbiAgICAvL2lmIHZhbHVlIGNoYW5nZWQgdHJpZ2dlciB2YWx1ZUFjY2Vzc29yIGV2ZW50cyBhbmQgb3V0cHV0c1xuICAgIGlmIChpbml0VmFsdWUgIT09IHRoaXMucmF0aW5nKSB7XG4gICAgICBjb25zdCAkZXZlbnQ6IFJhdGluZ0NoYW5nZUV2ZW50ID0geyByYXRpbmc6IHRoaXMucmF0aW5nIH07XG4gICAgICB0aGlzLnNhdmVPblJhdGluZ0NoYW5nZSgkZXZlbnQpO1xuXG4gICAgICB0aGlzLnNhdmVPbk1vZGVsQ2hhbmdlKHRoaXMucmF0aW5nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogb25TdGFyQ2xpY2tlZFxuICAgKlxuICAgKiBJcyBmaXJlZCB3aGVuIGEgc3RhciBpcyBjbGlja2VkLiBBbmQgdXBkYXRlZCB0aGUgcmF0aW5nIHZhbHVlLlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgaWYgdGhlIGRpc2FibGVkIG9yIHJlYWRPbmx5XG4gICAqIHByb3BlcnR5IGlzIHNldC4gSWYgcHJvdmlkZWQgaXQgZW1pdHMgdGhlIG9uQ2xpY2sgZXZlbnRcbiAgICogaGFuZGxlciB3aXRoIHRoZSBhY3R1YWwgcmF0aW5nIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0gcmF0aW5nXG4gICAqL1xuICBvblN0YXJDbGlja2VkKHJhdGluZzogbnVtYmVyKTogdm9pZCB7XG4gICAgLy9maXJlIG9uQ2xpY2sgZXZlbnRcbiAgICBpZiAoIXRoaXMuaW50ZXJhY3Rpb25Qb3NzaWJsZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5yYXRpbmcgPSByYXRpbmc7XG5cbiAgICBjb25zdCBvbkNsaWNrRXZlbnRPYmplY3Q6IENsaWNrRXZlbnQgPSB7XG4gICAgICByYXRpbmc6IHRoaXMucmF0aW5nLFxuICAgIH07XG4gICAgdGhpcy5zYXZlT25DbGljayhvbkNsaWNrRXZlbnRPYmplY3QpO1xuICB9XG59XG4iLCI8ZGl2IGlkPVwie3tpZH19XCIgY2xhc3M9XCJyYXRpbmcge3tnZXRDb21wb25lbnRDbGFzc05hbWVzKCl9fVwiIHRhYmluZGV4PVwiMFwiXG4gIChrZXlkb3duKT1cIm9uS2V5RG93bigkZXZlbnQpXCIgKGJsdXIpPVwib25CbHVyKCRldmVudClcIlxuICAoZm9jdXMpPVwib25Gb2N1cygkZXZlbnQpXCIgKG1vdXNlbGVhdmUpPVwib25TdGFySG92ZXIoMClcIj5cbiAgPGRpdiAqbmdJZj1cImxhYmVsVGV4dFwiIGNsYXNzPVwibGFiZWwtdmFsdWVcIj57e2xhYmVsVGV4dH19PC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJzdGFyLWNvbnRhaW5lclwiPlxuICAgIDxkaXYgY2xhc3M9XCJzdGFyXCIgKG1vdXNlZW50ZXIpPVwib25TdGFySG92ZXIoc3RhcilcIlxuICAgICAgKm5nRm9yPVwibGV0IHN0YXIgb2Ygc3RhcnNcIiAoY2xpY2spPVwib25TdGFyQ2xpY2tlZChzdGFyKVwiPlxuICAgICAgPGkgKm5nSWY9XCIhc3ZnVmlzaWJsZSgpXCIgY2xhc3M9XCJzdGFyLWVtcHR5IHt7Y2xhc3NFbXB0eX19XCI+PC9pPlxuICAgICAgPGkgKm5nSWY9XCIhc3ZnVmlzaWJsZSgpXCIgY2xhc3M9XCJzdGFyLWhhbGYge3tjbGFzc0hhbGZ9fVwiPjwvaT5cbiAgICAgIDxpICpuZ0lmPVwiIXN2Z1Zpc2libGUoKVwiIGNsYXNzPVwic3Rhci1maWxsZWQge3tjbGFzc0ZpbGxlZH19XCI+PC9pPlxuICAgICAgPHN2ZyAqbmdJZj1cInN2Z1Zpc2libGUoKVwiIGNsYXNzPVwic3Rhci1lbXB0eVwiPlxuICAgICAgICA8dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiXG4gICAgICAgICAgW2F0dHIueGxpbms6aHJlZl09XCJwYXRoRW1wdHlcIj48L3VzZT5cbiAgICAgIDwvc3ZnPlxuICAgICAgPHN2ZyAqbmdJZj1cInN2Z1Zpc2libGUoKVwiIGNsYXNzPVwic3Rhci1oYWxmXCI+XG4gICAgICAgIDx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCJcbiAgICAgICAgICBbYXR0ci54bGluazpocmVmXT1cInBhdGhIYWxmXCI+PC91c2U+XG4gICAgICA8L3N2Zz5cbiAgICAgIDxzdmcgKm5nSWY9XCJzdmdWaXNpYmxlKClcIiBjbGFzcz1cInN0YXItZmlsbGVkXCI+XG4gICAgICAgIDx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCJcbiAgICAgICAgICBbYXR0ci54bGluazpocmVmXT1cInBhdGhGaWxsZWRcIj48L3VzZT5cbiAgICAgIDwvc3ZnPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19