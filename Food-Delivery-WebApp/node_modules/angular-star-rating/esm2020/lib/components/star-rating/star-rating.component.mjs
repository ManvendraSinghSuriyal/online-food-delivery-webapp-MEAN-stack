import { Component, EventEmitter, Input, Output } from '@angular/core';
import { StarRating } from '../../services/star-rating';
import { StarRatingUtils } from '../../services/star-rating.utils';
import * as i0 from "@angular/core";
import * as i1 from "../../services/star-rating-config.service";
import * as i2 from "@angular/common";
export class StarRatingComponent extends StarRating {
    constructor(config) {
        super(config);
        this.starClickChange = new EventEmitter();
        this.ratingChange = new EventEmitter();
        this.hoverRatingChange = new EventEmitter();
    }
    saveOnClick($event) {
        if (this.starClickChange) {
            this.starClickChange.emit($event);
        }
    }
    saveOnRatingChange($event) {
        if (this.ratingChange) {
            this.ratingChange.emit($event);
        }
    }
    saveOnHover($event) {
        if (this.hoverRatingChange) {
            this.hoverRatingChange.emit($event);
        }
    }
    /**ACCESSIBILITY **/
    //Keyboard events
    onKeyDown(event) {
        if (!this.interactionPossible()) {
            return;
        }
        const handlers = {
            //Decrement
            Minus: () => this.decrement(),
            ArrowDown: () => this.decrement(),
            ArrowLeft: () => this.decrement(),
            //Increment
            Plus: () => this.increment(),
            ArrowRight: () => this.increment(),
            ArrowUp: () => this.increment(),
            //Reset
            Backspace: () => this.reset(),
            Delete: () => this.reset(),
            Digit0: () => this.reset(),
        };
        const handleDigits = (eventCode) => {
            const dStr = 'Digit';
            const digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);
            this.rating = digit;
        };
        if (handlers[event['code']] ||
            StarRatingUtils.isDigitKeyEventCode(event['code'])) {
            if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {
                handleDigits(event['code']);
            }
            else {
                handlers[event['code']]();
            }
            event.preventDefault();
            event.stopPropagation();
        }
    }
    //Hover events
    onStarHover(rating) {
        if (!this.interactionPossible() || !this.hoverEnabled) {
            return;
        }
        this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0;
        //update calculated Color
        this.setColor(true);
        //fire onHoverRatingChange event
        const $event = { hoverRating: this.hoverRating };
        this.saveOnHover($event);
    }
    onStopHover() {
        if (!this.interactionPossible() || !this.hoverEnabled) {
            return;
        }
        this.hoverRating = 0;
        //update calculated Color
        this.setColor();
    }
    //Overrides
    setRating(value) {
        const initValue = this.rating;
        super.setRating(value);
        //if value changed trigger valueAccessor events and outputs
        if (initValue !== this.rating) {
            const $event = { rating: this.rating };
            this.saveOnRatingChange($event);
        }
    }
    /**
     * onStarClicked
     *
     * Is fired when a star is clicked. And updated the rating value.
     * This function returns if the disabled or readOnly
     * property is set. If provided it emits the onClick event
     * handler with the actual rating value.
     *
     * @param rating
     */
    onStarClicked(rating) {
        //fire onClick event
        if (!this.interactionPossible()) {
            return;
        }
        this.rating = rating;
        const onClickEventObject = {
            rating: this.rating,
        };
        this.saveOnClick(onClickEventObject);
    }
}
StarRatingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: StarRatingComponent, deps: [{ token: i1.StarRatingConfigService }], target: i0.ɵɵFactoryTarget.Component });
StarRatingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.0.0", type: StarRatingComponent, selector: "star-rating", inputs: { getHalfStarVisible: "getHalfStarVisible", getColor: "getColor" }, outputs: { starClickChange: "starClickChange", ratingChange: "ratingChange", hoverRatingChange: "hoverRatingChange" }, usesInheritance: true, ngImport: i0, template: "<div id=\"{{id}}\" class=\"rating {{getComponentClassNames()}}\" tabindex=\"0\"\n  (keydown)=\"onKeyDown($event)\" (mouseleave)=\"onStopHover()\">\n  <div *ngIf=\"labelText\" class=\"label-value\">{{labelText}}</div>\n  <div class=\"star-container\">\n    <div class=\"star\" (mouseenter)=\"onStarHover(star)\"\n      *ngFor=\"let star of stars\" (click)=\"onStarClicked(star)\">\n      <i *ngIf=\"!svgVisible()\" class=\"star-empty {{classEmpty}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-half {{classHalf}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-filled {{classFilled}}\"></i>\n      <svg *ngIf=\"svgVisible()\" class=\"star-empty\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathEmpty\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-half\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathHalf\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-filled\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathFilled\"></use>\n      </svg>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.0.0", ngImport: i0, type: StarRatingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'star-rating', template: "<div id=\"{{id}}\" class=\"rating {{getComponentClassNames()}}\" tabindex=\"0\"\n  (keydown)=\"onKeyDown($event)\" (mouseleave)=\"onStopHover()\">\n  <div *ngIf=\"labelText\" class=\"label-value\">{{labelText}}</div>\n  <div class=\"star-container\">\n    <div class=\"star\" (mouseenter)=\"onStarHover(star)\"\n      *ngFor=\"let star of stars\" (click)=\"onStarClicked(star)\">\n      <i *ngIf=\"!svgVisible()\" class=\"star-empty {{classEmpty}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-half {{classHalf}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-filled {{classFilled}}\"></i>\n      <svg *ngIf=\"svgVisible()\" class=\"star-empty\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathEmpty\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-half\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathHalf\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-filled\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathFilled\"></use>\n      </svg>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.StarRatingConfigService }]; }, propDecorators: { getHalfStarVisible: [{
                type: Input
            }], getColor: [{
                type: Input
            }], starClickChange: [{
                type: Output
            }], ratingChange: [{
                type: Output
            }], hoverRatingChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhci1yYXRpbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLXN0YXItcmF0aW5nL3NyYy9saWIvY29tcG9uZW50cy9zdGFyLXJhdGluZy9zdGFyLXJhdGluZy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItc3Rhci1yYXRpbmcvc3JjL2xpYi9jb21wb25lbnRzL3N0YXItcmF0aW5nL3N0YXItcmF0aW5nLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFNdkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXhELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7OztBQU1uRSxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsVUFBVTtJQTRHakQsWUFBWSxNQUErQjtRQUN6QyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFwR2hCLG9CQUFlLEdBQTZCLElBQUksWUFBWSxFQUFjLENBQUM7UUFHM0UsaUJBQVksR0FBb0MsSUFBSSxZQUFZLEVBQXFCLENBQUM7UUFHdEYsc0JBQWlCLEdBQXlDLElBQUksWUFBWSxFQUEwQixDQUFDO0lBK0ZyRyxDQUFDO0lBN0ZELFdBQVcsQ0FBQyxNQUFrQjtRQUM1QixJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbkM7SUFDSCxDQUFDO0lBRUQsa0JBQWtCLENBQUMsTUFBeUI7UUFDMUMsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NB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RGhCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDbGlja0V2ZW50IH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jbGljay1ldmVudC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSG92ZXJSYXRpbmdDaGFuZ2VFdmVudCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvaG92ZXItcmF0aW5nLWNoYW5nZS1ldmVudC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUmF0aW5nQ2hhbmdlRXZlbnQgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3JhdGluZy1jaGFuZ2UtZXZlbnQuaW50ZXJmYWNlJztcbmltcG9ydCB7IHN0YXJSYXRpbmdDb2xvciB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvc3Rhci1yYXRpbmctY29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQgeyBTdGFyUmF0aW5nIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvc3Rhci1yYXRpbmcnO1xuaW1wb3J0IHsgU3RhclJhdGluZ0NvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zdGFyLXJhdGluZy1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBTdGFyUmF0aW5nVXRpbHMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zdGFyLXJhdGluZy51dGlscyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3N0YXItcmF0aW5nJyxcbiAgdGVtcGxhdGVVcmw6ICdzdGFyLXJhdGluZy5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIFN0YXJSYXRpbmdDb21wb25lbnQgZXh0ZW5kcyBTdGFyUmF0aW5nIHtcbiAgQElucHV0KCkgZ2V0SGFsZlN0YXJWaXNpYmxlOiAocmF0aW5nOiBudW1iZXIpID0+IGJvb2xlYW47XG4gIEBJbnB1dCgpIGdldENvbG9yOiAoXG4gICAgcmF0aW5nOiBudW1iZXIsXG4gICAgbnVtT2ZTdGFyczogbnVtYmVyLFxuICAgIHN0YXRpY0NvbG9yPzogc3RhclJhdGluZ0NvbG9yIHwgdW5kZWZpbmVkXG4gICkgPT4gc3RhclJhdGluZ0NvbG9yO1xuXG4gIEBPdXRwdXQoKVxuICBzdGFyQ2xpY2tDaGFuZ2U6IEV2ZW50RW1pdHRlcjxDbGlja0V2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8Q2xpY2tFdmVudD4oKTtcblxuICBAT3V0cHV0KClcbiAgcmF0aW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8UmF0aW5nQ2hhbmdlRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxSYXRpbmdDaGFuZ2VFdmVudD4oKTtcblxuICBAT3V0cHV0KClcbiAgaG92ZXJSYXRpbmdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxIb3ZlclJhdGluZ0NoYW5nZUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8SG92ZXJSYXRpbmdDaGFuZ2VFdmVudD4oKTtcblxuICBzYXZlT25DbGljaygkZXZlbnQ6IENsaWNrRXZlbnQpIHtcbiAgICBpZiAodGhpcy5zdGFyQ2xpY2tDaGFuZ2UpIHtcbiAgICAgIHRoaXMuc3RhckNsaWNrQ2hhbmdlLmVtaXQoJGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBzYXZlT25SYXRpbmdDaGFuZ2UoJGV2ZW50OiBSYXRpbmdDaGFuZ2VFdmVudCkge1xuICAgIGlmICh0aGlzLnJhdGluZ0NoYW5nZSkge1xuICAgICAgdGhpcy5yYXRpbmdDaGFuZ2UuZW1pdCgkZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHNhdmVPbkhvdmVyKCRldmVudDogSG92ZXJSYXRpbmdDaGFuZ2VFdmVudCkge1xuICAgIGlmICh0aGlzLmhvdmVyUmF0aW5nQ2hhbmdlKSB7XG4gICAgICB0aGlzLmhvdmVyUmF0aW5nQ2hhbmdlLmVtaXQoJGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipBQ0NFU1NJQklMSVRZICoqL1xuXG4gIC8vS2V5Ym9hcmQgZXZlbnRzXG4gIG9uS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGlmICghdGhpcy5pbnRlcmFjdGlvblBvc3NpYmxlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVyczogUmVjb3JkPHN0cmluZywgKCkgPT4gdm9pZD4gPSB7XG4gICAgICAvL0RlY3JlbWVudFxuICAgICAgTWludXM6ICgpID0+IHRoaXMuZGVjcmVtZW50KCksXG4gICAgICBBcnJvd0Rvd246ICgpID0+IHRoaXMuZGVjcmVtZW50KCksXG4gICAgICBBcnJvd0xlZnQ6ICgpID0+IHRoaXMuZGVjcmVtZW50KCksXG5cbiAgICAgIC8vSW5jcmVtZW50XG4gICAgICBQbHVzOiAoKSA9PiB0aGlzLmluY3JlbWVudCgpLFxuICAgICAgQXJyb3dSaWdodDogKCkgPT4gdGhpcy5pbmNyZW1lbnQoKSxcbiAgICAgIEFycm93VXA6ICgpID0+IHRoaXMuaW5jcmVtZW50KCksXG5cbiAgICAgIC8vUmVzZXRcbiAgICAgIEJhY2tzcGFjZTogKCkgPT4gdGhpcy5yZXNldCgpLFxuICAgICAgRGVsZXRlOiAoKSA9PiB0aGlzLnJlc2V0KCksXG4gICAgICBEaWdpdDA6ICgpID0+IHRoaXMucmVzZXQoKSxcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlRGlnaXRzID0gKGV2ZW50Q29kZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBkU3RyID0gJ0RpZ2l0JztcbiAgICAgIGNvbnN0IGRpZ2l0OiBudW1iZXIgPSBwYXJzZUludChcbiAgICAgICAgZXZlbnRDb2RlLnN1YnN0cihkU3RyLmxlbmd0aCwgZXZlbnRDb2RlLmxlbmd0aCAtIDEpLFxuICAgICAgICAxMFxuICAgICAgKTtcbiAgICAgIHRoaXMucmF0aW5nID0gZGlnaXQ7XG4gICAgfTtcblxuICAgIGlmIChcbiAgICAgIGhhbmRsZXJzW2V2ZW50Wydjb2RlJ11dIHx8XG4gICAgICBTdGFyUmF0aW5nVXRpbHMuaXNEaWdpdEtleUV2ZW50Q29kZShldmVudFsnY29kZSddKVxuICAgICkge1xuICAgICAgaWYgKFN0YXJSYXRpbmdVdGlscy5pc0RpZ2l0S2V5RXZlbnRDb2RlKGV2ZW50Wydjb2RlJ10pKSB7XG4gICAgICAgIGhhbmRsZURpZ2l0cyhldmVudFsnY29kZSddKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbmRsZXJzW2V2ZW50Wydjb2RlJ11dKCk7XG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLy9Ib3ZlciBldmVudHNcbiAgb25TdGFySG92ZXIocmF0aW5nPzogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmludGVyYWN0aW9uUG9zc2libGUoKSB8fCAhdGhpcy5ob3ZlckVuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmhvdmVyUmF0aW5nID0gcmF0aW5nID8gcGFyc2VJbnQocmF0aW5nLnRvU3RyaW5nKCksIDEwKSA6IDA7XG4gICAgLy91cGRhdGUgY2FsY3VsYXRlZCBDb2xvclxuICAgIHRoaXMuc2V0Q29sb3IodHJ1ZSk7XG5cbiAgICAvL2ZpcmUgb25Ib3ZlclJhdGluZ0NoYW5nZSBldmVudFxuICAgIGNvbnN0ICRldmVudDogSG92ZXJSYXRpbmdDaGFuZ2VFdmVudCA9IHsgaG92ZXJSYXRpbmc6IHRoaXMuaG92ZXJSYXRpbmcgfTtcbiAgICB0aGlzLnNhdmVPbkhvdmVyKCRldmVudCk7XG4gIH1cblxuICBvblN0b3BIb3ZlcigpIHtcbiAgICBpZiAoIXRoaXMuaW50ZXJhY3Rpb25Qb3NzaWJsZSgpIHx8ICF0aGlzLmhvdmVyRW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaG92ZXJSYXRpbmcgPSAwO1xuICAgIC8vdXBkYXRlIGNhbGN1bGF0ZWQgQ29sb3JcbiAgICB0aGlzLnNldENvbG9yKCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFN0YXJSYXRpbmdDb25maWdTZXJ2aWNlKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcbiAgfVxuXG4gIC8vT3ZlcnJpZGVzXG4gIHNldFJhdGluZyh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgaW5pdFZhbHVlID0gdGhpcy5yYXRpbmc7XG4gICAgc3VwZXIuc2V0UmF0aW5nKHZhbHVlKTtcblxuICAgIC8vaWYgdmFsdWUgY2hhbmdlZCB0cmlnZ2VyIHZhbHVlQWNjZXNzb3IgZXZlbnRzIGFuZCBvdXRwdXRzXG4gICAgaWYgKGluaXRWYWx1ZSAhPT0gdGhpcy5yYXRpbmcpIHtcbiAgICAgIGNvbnN0ICRldmVudDogUmF0aW5nQ2hhbmdlRXZlbnQgPSB7IHJhdGluZzogdGhpcy5yYXRpbmcgfTtcbiAgICAgIHRoaXMuc2F2ZU9uUmF0aW5nQ2hhbmdlKCRldmVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIG9uU3RhckNsaWNrZWRcbiAgICpcbiAgICogSXMgZmlyZWQgd2hlbiBhIHN0YXIgaXMgY2xpY2tlZC4gQW5kIHVwZGF0ZWQgdGhlIHJhdGluZyB2YWx1ZS5cbiAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGlmIHRoZSBkaXNhYmxlZCBvciByZWFkT25seVxuICAgKiBwcm9wZXJ0eSBpcyBzZXQuIElmIHByb3ZpZGVkIGl0IGVtaXRzIHRoZSBvbkNsaWNrIGV2ZW50XG4gICAqIGhhbmRsZXIgd2l0aCB0aGUgYWN0dWFsIHJhdGluZyB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHJhdGluZ1xuICAgKi9cbiAgb25TdGFyQ2xpY2tlZChyYXRpbmc6IG51bWJlcik6IHZvaWQge1xuICAgIC8vZmlyZSBvbkNsaWNrIGV2ZW50XG4gICAgaWYgKCF0aGlzLmludGVyYWN0aW9uUG9zc2libGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmF0aW5nID0gcmF0aW5nO1xuXG4gICAgY29uc3Qgb25DbGlja0V2ZW50T2JqZWN0OiBDbGlja0V2ZW50ID0ge1xuICAgICAgcmF0aW5nOiB0aGlzLnJhdGluZyxcbiAgICB9O1xuICAgIHRoaXMuc2F2ZU9uQ2xpY2sob25DbGlja0V2ZW50T2JqZWN0KTtcbiAgfVxufVxuIiwiPGRpdiBpZD1cInt7aWR9fVwiIGNsYXNzPVwicmF0aW5nIHt7Z2V0Q29tcG9uZW50Q2xhc3NOYW1lcygpfX1cIiB0YWJpbmRleD1cIjBcIlxuICAoa2V5ZG93bik9XCJvbktleURvd24oJGV2ZW50KVwiIChtb3VzZWxlYXZlKT1cIm9uU3RvcEhvdmVyKClcIj5cbiAgPGRpdiAqbmdJZj1cImxhYmVsVGV4dFwiIGNsYXNzPVwibGFiZWwtdmFsdWVcIj57e2xhYmVsVGV4dH19PC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJzdGFyLWNvbnRhaW5lclwiPlxuICAgIDxkaXYgY2xhc3M9XCJzdGFyXCIgKG1vdXNlZW50ZXIpPVwib25TdGFySG92ZXIoc3RhcilcIlxuICAgICAgKm5nRm9yPVwibGV0IHN0YXIgb2Ygc3RhcnNcIiAoY2xpY2spPVwib25TdGFyQ2xpY2tlZChzdGFyKVwiPlxuICAgICAgPGkgKm5nSWY9XCIhc3ZnVmlzaWJsZSgpXCIgY2xhc3M9XCJzdGFyLWVtcHR5IHt7Y2xhc3NFbXB0eX19XCI+PC9pPlxuICAgICAgPGkgKm5nSWY9XCIhc3ZnVmlzaWJsZSgpXCIgY2xhc3M9XCJzdGFyLWhhbGYge3tjbGFzc0hhbGZ9fVwiPjwvaT5cbiAgICAgIDxpICpuZ0lmPVwiIXN2Z1Zpc2libGUoKVwiIGNsYXNzPVwic3Rhci1maWxsZWQge3tjbGFzc0ZpbGxlZH19XCI+PC9pPlxuICAgICAgPHN2ZyAqbmdJZj1cInN2Z1Zpc2libGUoKVwiIGNsYXNzPVwic3Rhci1lbXB0eVwiPlxuICAgICAgICA8dXNlIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiXG4gICAgICAgICAgW2F0dHIueGxpbms6aHJlZl09XCJwYXRoRW1wdHlcIj48L3VzZT5cbiAgICAgIDwvc3ZnPlxuICAgICAgPHN2ZyAqbmdJZj1cInN2Z1Zpc2libGUoKVwiIGNsYXNzPVwic3Rhci1oYWxmXCI+XG4gICAgICAgIDx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCJcbiAgICAgICAgICBbYXR0ci54bGluazpocmVmXT1cInBhdGhIYWxmXCI+PC91c2U+XG4gICAgICA8L3N2Zz5cbiAgICAgIDxzdmcgKm5nSWY9XCJzdmdWaXNpYmxlKClcIiBjbGFzcz1cInN0YXItZmlsbGVkXCI+XG4gICAgICAgIDx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCJcbiAgICAgICAgICBbYXR0ci54bGluazpocmVmXT1cInBhdGhGaWxsZWRcIj48L3VzZT5cbiAgICAgIDwvc3ZnPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19