import { StarRatingConfig, starRatingColor, starRatingDirection, starRatingLabelPosition, starRatingSizes, starRatingSpeed, starRatingStarSpace, starRatingStarTypes } from '../interfaces/star-rating-config.interface';
import { StarRatingConfigService } from './star-rating-config.service';
import * as i0 from "@angular/core";
export declare class StarRating {
    protected config: StarRatingConfig;
    classEmpty: string;
    classHalf: string;
    classFilled: string;
    pathEmpty: string;
    pathHalf: string;
    pathFilled: string;
    color: starRatingColor;
    stars: Array<number>;
    ratingAsInteger: number;
    halfStarVisible: boolean;
    /**
     * showHalfStars
     */
    protected _showHalfStars: boolean;
    get showHalfStars(): boolean;
    set showHalfStars(value: boolean);
    /**
     * getColor
     */
    getColor: (rating: number, numOfStars: number, staticColor?: starRatingColor) => starRatingColor;
    /**
     * getHalfStarVisible
     */
    getHalfStarVisible: (rating: number) => boolean;
    /**
     * id property to identify the DOM element
     */
    protected _id: string;
    get id(): string;
    set id(value: string);
    /**
     * focus
     */
    protected _focus: boolean;
    get focus(): boolean;
    set focus(value: boolean);
    /**
     * labelText
     */
    protected _labelText: string;
    get labelText(): string;
    set labelText(value: string);
    /**
     * labelPosition
     */
    protected _labelPosition: starRatingLabelPosition;
    get labelPosition(): starRatingLabelPosition;
    set labelPosition(value: starRatingLabelPosition);
    /**
     * labelVisible
     */
    protected _labelVisible: boolean;
    get labelVisible(): boolean;
    set labelVisible(value: boolean);
    /**
     * hoverEnabled
     */
    protected _hoverEnabled: boolean;
    get hoverEnabled(): boolean;
    set hoverEnabled(value: boolean);
    /**
     * staticColor
     */
    protected _staticColor: starRatingColor;
    get staticColor(): starRatingColor;
    set staticColor(value: starRatingColor);
    /**
     * direction
     */
    protected _direction: starRatingDirection;
    get direction(): starRatingDirection;
    set direction(value: starRatingDirection);
    /**
     * numOfStars
     */
    protected _numOfStars: number;
    get numOfStars(): number;
    set numOfStars(value: number);
    /**
     * hoverRating
     */
    protected _hoverRating: number;
    get hoverRating(): number;
    set hoverRating(value: number);
    /**
     * speed
     */
    protected _speed: starRatingSpeed;
    get speed(): starRatingSpeed;
    set speed(value: starRatingSpeed);
    /**
     * size
     */
    protected _size: starRatingSizes;
    get size(): starRatingSizes;
    set size(value: starRatingSizes);
    /**
     * starType
     */
    protected _starType: starRatingStarTypes;
    get starType(): starRatingStarTypes;
    set starType(value: starRatingStarTypes);
    /**
     * space
     */
    protected _space: starRatingStarSpace;
    get space(): starRatingStarSpace;
    set space(value: starRatingStarSpace);
    /**
     * readOnly
     */
    protected _readOnly: boolean;
    get readOnly(): boolean;
    set readOnly(value: boolean);
    /**
     * disabled
     */
    protected _disabled: boolean;
    get disabled(): boolean;
    set disabled(value: boolean);
    private _step;
    get step(): number;
    set step(value: number);
    /**
     * rating
     */
    protected _rating: number;
    get rating(): number;
    set rating(value: number);
    /**
     * setRating
     * I use a setter function instead of a set method to enable overrides for this function.
     * @param value
     */
    setRating(value: number): void;
    constructor(config: StarRatingConfigService);
    svgVisible(): boolean;
    interactionPossible(): boolean;
    setColor(useHoverValue?: boolean): void;
    setHalfStarVisible(): void;
    getComponentClassNames(): string;
    increment(): void;
    decrement(): void;
    reset(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<StarRating, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<StarRating, "placeholder-star-rating", never, { "showHalfStars": "showHalfStars"; "id": "id"; "focus": "focus"; "labelText": "labelText"; "labelPosition": "labelPosition"; "labelVisible": "labelVisible"; "hoverEnabled": "hoverEnabled"; "staticColor": "staticColor"; "direction": "direction"; "numOfStars": "numOfStars"; "hoverRating": "hoverRating"; "speed": "speed"; "size": "size"; "starType": "starType"; "space": "space"; "readOnly": "readOnly"; "disabled": "disabled"; "step": "step"; "rating": "rating"; }, {}, never, never, false>;
}
